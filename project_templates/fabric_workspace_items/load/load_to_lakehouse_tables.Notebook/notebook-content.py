# Fabric notebook source

# METADATA ********************

# META {
# META   "kernel_info": {
# META     "name": "synapse_pyspark"
# META   },
# META   "dependencies": {
# META     "lakehouse": {
# META       "default_lakehouse": "6adb67d6-c8eb-4612-9053-890cae3a55d7",
# META       "default_lakehouse_name": "edw",
# META       "default_lakehouse_workspace_id": "50fbcab0-7d56-46f7-90f6-80ceb00ac86d",
# META       "known_lakehouses": [
# META         {
# META           "id": "6adb67d6-c8eb-4612-9053-890cae3a55d7"
# META         },
# META         {
# META           "id": "23ba8378-7884-4ac7-bab5-10e11af43d6c"
# META         }
# META       ]
# META     }
# META   }
# META }

# MARKDOWN ********************

# ---
# # Load Parquet to Lakehouse
# 
# - Notebook to load parquet files to a fabric lakehouse 
# - Allows for incremental load based on partitions
# 
# ![download.jpg](attachment:c768d43a-8c7c-42bc-a3b5-225798672349.jpg)
# 
# ---


# ATTACHMENTS ********************

# ATTA {
# ATTA   "c768d43a-8c7c-42bc-a3b5-225798672349.jpg": {
# ATTA     "image/jpeg": ""
# ATTA   }
# ATTA }

# MARKDOWN ********************

# ## Parameters

# CELL ********************

# ✨ Parameters ───────────────────────────────────────────────────────────────
fabric_environment = "development"
config_workspace_id = "50fbcab0-7d56-46f7-90f6-80ceb00ac86d"
config_lakehouse_id = "23ba8378-7884-4ac7-bab5-10e11af43d6c"
load_year  = 2018         # year to generate data for (must be between 2013 and 2022)
load_month = 1
load_day = 1
debug = True
configuration_database_workspace_id = "50fbcab0-7d56-46f7-90f6-80ceb00ac86d"
configuration_database_warehouse_name = "WH"
configuration_database_warehouse_id = "8a26f137-fd0b-47f6-92e1-e4551593c751"

source_directory = 'Files/exports'
return_leaf_directories = True # Dictates whether the notebook is expecting parquet file directories or singular parquet files




# METADATA ********************

# META {
# META   "language": "python",
# META   "language_group": "synapse_pyspark"
# META }

# MARKDOWN ********************

# ## Installs

# CELL ********************

#!pip install pydantic

# METADATA ********************

# META {
# META   "language": "python",
# META   "language_group": "synapse_pyspark"
# META }

# MARKDOWN ********************

# ## Reusable Libraries

# MARKDOWN ********************

# ### Config Utils

# CELL ********************

from dataclasses import dataclass, asdict
from typing import List, Callable, Optional
from datetime import datetime
from pyspark.sql.types import StructType, StructField, StringType, BooleanType, TimestampType, IntegerType

class config_utils:
    @dataclass
    class FabricConfig:
        fabric_environment: str
        config_workspace_id: str
        config_lakehouse_id: str
        edw_workspace_id: str
        edw_warehouse_id: str
        edw_warehouse_name: str        
        edw_lakehouse_id: str
        edw_lakehouse_name: str
        legacy_synapse_connection_name: str
        synapse_export_shortcut_path_in_onelake: str
        full_reset: bool
        update_date: Optional[datetime] = None  # If you're tracking timestamps
        
        def get_attribute(self, attr_name: str) -> any:
            """Get attribute value by string name with error handling."""
            if hasattr(self, attr_name):
                return getattr(self, attr_name)
            else:
                raise AttributeError(f"FabricConfig has no attribute '{attr_name}'")
    
    
    def __init__(self, config_workspace_id, config_lakehouse_id):
        self.fabric_environments_table_uri = f"abfss://{config_workspace_id}@onelake.dfs.fabric.microsoft.com/" \
            f"{config_lakehouse_id}/Tables/config_fabric_environments"
        self._configs: dict[string,any] = {}

    @staticmethod
    def config_schema() -> StructType:
        return StructType([
            StructField("fabric_environment", StringType(), nullable=False),
            StructField("config_workspace_id", StringType(), nullable=False),
            StructField("config_lakehouse_id", StringType(), nullable=False),
            StructField("edw_workspace_id", StringType(), nullable=False),
            StructField("edw_warehouse_id", StringType(), nullable=False),
            StructField("edw_warehouse_name", StringType(), nullable=False),            
            StructField("edw_lakehouse_id", StringType(), nullable=False),
            StructField("edw_lakehouse_name", StringType(), nullable=False),
            StructField("legacy_synapse_connection_name", StringType(), nullable=False),
            StructField("synapse_export_shortcut_path_in_onelake", StringType(), nullable=False),
            StructField("full_reset", BooleanType(), nullable=False),
            StructField("update_date", TimestampType(), nullable=False)
        ])

    def get_configs_as_dict(self, fabric_environment: str):
        df = spark.read.format("delta").load(self.fabric_environments_table_uri)
        df_filtered = df.filter(df.fabric_environment == fabric_environment)

        # Convert to a list of Row objects (dict-like)
        configs = df_filtered.collect()
        
        # Convert to a list of dictionaries
        config_dicts = [row.asDict() for row in configs]

        # If expecting only one config per environment, return just the first dict
        return config_dicts[0] if config_dicts else None

    def get_configs_as_object(self, fabric_environment: str):
        df = spark.read.format("delta").load(self.fabric_environments_table_uri)
        row = df.filter(df.fabric_environment == fabric_environment).limit(1).collect()

        if not row:
            return None
        
        return config_utils.FabricConfig(**row[0].asDict())

    def merge_config_record(self, config: 'config_utils.FabricConfig'):        
        if config.update_date is None:
            config.update_date = datetime.now()
        data = [tuple(asdict(config).values())]
        
        
        df = spark.createDataFrame(data, config_utils.config_schema())

        if(lakehouse_utils.check_if_table_exists(self.fabric_environments_table_uri) == False):
            print('creating fabric environments table') 
            df.write \
            .format("delta") \
            .mode("overwrite") \
            .option("overwriteSchema", "true") \
            .save(self.fabric_environments_table_uri)
        else:
            print('updating fabric environments table') 
            target_table = DeltaTable.forPath(spark, self.fabric_environments_table_uri)
            # Perform the MERGE operation using environment as the key
            target_table.alias("t").merge(
                df.alias("s"),
                "t.fabric_environment = s.fabric_environment"
            ).whenMatchedUpdateAll() \
            .whenNotMatchedInsertAll() \
            .execute()

# METADATA ********************

# META {
# META   "language": "python",
# META   "language_group": "synapse_pyspark"
# META }

# MARKDOWN ********************

# ### Lakehouse Utils

# CELL ********************


class lakehouse_utils:
    def __init__(self, target_workspace_id, target_lakehouse_id):
        self.target_workspace_id = target_workspace_id
        self.target_lakehouse_id = target_lakehouse_id
        self.filesdir =  f"abfss://{target_workspace_id}@onelake.dfs.fabric.microsoft.com/{target_lakehouse_id}/Files/"

    @staticmethod
    def check_if_table_exists(table_path):
        table_exists = False
        try:
            if DeltaTable.isDeltaTable(spark, table_path):
                table_exists = True
                #print(f"Delta table already exists at path: {table_path}, skipping creation.")
        except Exception as e:
            # If the path does not exist or is inaccessible, isDeltaTable returns False or may throw.
            # Treat exceptions as "table does not exist".
            #print(f"Could not verify Delta table existence at {table_path} (exception: {e}); assuming it does not exist.")
            table_exists = False
        return table_exists

    def lakehouse_tables_uri(self):
        return f"abfss://{self.target_workspace_id}@onelake.dfs.fabric.microsoft.com/{self.target_lakehouse_id}/Tables/"        

    def write_to_lakehouse_table(
        df,
        table_name: str,        
        format: str = "delta",
        mode: str = "overwrite",
        options: dict = None
    ):
        writer = df.write.format(format).mode(mode)        

        if options:
            for k, v in options.items():
                writer = writer.option(k, v)

        writer.save(f"{self.lakehouse_tables_uri()}{table_name}")
    
    def drop_all_tables(self):
            # Base ABFSS endpoint and the ‘Tables’ root
            lakehouse_root = (
                f"abfss://{self.target_workspace_id}"
                f"@onelake.dfs.fabric.microsoft.com/"
                f"{self.target_lakehouse_id}/Tables"
            )
            # ──────────────────────────────────────────────────────────────────────────────

            # 2. START spark and get Hadoop FS handle
            # ──────────────────────────────────────────────────────────────────────────────
            spark = SparkSession.builder.getOrCreate()

            # Access Hadoop’s FileSystem via the JVM gateway
            hadoop_conf = spark._jsc.hadoopConfiguration()
            fs = spark._jvm.org.apache.hadoop.fs.FileSystem.get(hadoop_conf)

            # Path object for the Tables/ directory
            root_path = spark._jvm.org.apache.hadoop.fs.Path(lakehouse_root)

            # ──────────────────────────────────────────────────────────────────────────────
            # 3. Iterate, detect Delta tables, and delete
            # ──────────────────────────────────────────────────────────────────────────────

            for status in fs.listStatus(root_path):
                table_path_obj = status.getPath()
                table_path = table_path_obj.toString()  # e.g. abfss://…/Tables/my_table

                try:
                    # Check if this directory is a Delta table
                    if DeltaTable.isDeltaTable(spark, table_path):
                        # Delete the directory (recursive=True)
                        deleted = fs.delete(table_path_obj, True)
                        if deleted:
                            print(f"✔ Dropped Delta table at: {table_path}")
                        else:
                            print(f"✖ Failed to delete: {table_path}")
                    else:
                        print(f"— Skipping non-Delta path: {table_path}")
                except Exception as e:
                    # e.g. permission issue, or not a Delta table
                    print(f"⚠ Error checking/deleting {table_path}: {e}")

            print("✅ All eligible Delta tables under ‘Tables/’ have been dropped.")



# METADATA ********************

# META {
# META   "language": "python",
# META   "language_group": "synapse_pyspark"
# META }

# MARKDOWN ********************

# _blockstart:pyspark_parquet_load_utils_
# ### Parquet Load Utils

# CELL ********************

from dataclasses import dataclass
from pyspark.sql import Window
from pyspark.sql.functions import col, row_number, lower

class parquet_load_utils: 
    def __init__(self, lu: lakehouse_utils):
        self.config_table_uri = f"{lu_config.lakehouse_tables_uri()}config_parquet_loads"
        self.log_table_uri = f"{lu_config.lakehouse_tables_uri()}log_parquet_loads"


    @dataclass
    class ParquetLoadConfig:
        cfg_target_lakehouse_workspace_id: str
        cfg_target_lakehouse_id: str
        target_partition_columns: str
        target_sort_columns: str
        target_replace_where: str

        cfg_source_lakehouse_workspace_id: str
        cfg_source_lakehouse_id: str
        cfg_source_file_path: str
        source_file_path: str
        source_file_name: str

        cfg_legacy_synapse_connection_name: str
        synapse_source_schema_name: str
        synapse_source_table_name: str
        synapse_partition_clause: str

        execution_group: int
        active_yn: str

    @dataclass
    class ExecutionLog:
        execution_id: str
        cfg_target_lakehouse_workspace_id: str
        cfg_target_lakehouse_id: str
        partition_clause: Optional[str]
        status: str
        error_messages: Optional[str]
        start_date: datetime
        finish_date: datetime
        update_date: datetime

    
    def get_config_items_as_object(self):
        df = spark.read.format("delta").load(self.config_table_uri)    
        active_df = df.filter(lower(col("active_yn")) == "y")            
        return [parquet_load_utils.ParquetLoadConfig(**row.asDict()) for row in active_df.collect()]

    def get_log_items_as_object(self, status_filter = None):
        df = spark.read.format("delta").load(self.log_table_uri)
        
        if status_filter:
            df = df.filter(lower(col("status")) == status_filter)  # optional, adjust if needed

        # Define window to get max update_date per unique combination
        window_spec = Window.partitionBy(
            "execution_id"
        ).orderBy(col("update_date").desc())

        # Assign row number and filter to only the latest record per group
        df_latest = df.withColumn("row_num", row_number().over(window_spec)) \
                    .filter(col("row_num") == 1) \
                    .drop("row_num")   

        return [parquet_load_utils.ExecutionLog(**row.asDict()) for row in df.collect()]

# METADATA ********************

# META {
# META   "language": "python",
# META   "language_group": "synapse_pyspark"
# META }

# MARKDOWN ********************

# blockend:pyspark_parquet_load_utils_

# MARKDOWN ********************

# _blockstart:synapse_extract_utils_
# ### Synapse Extract Utils

# CELL ********************

from dataclasses import dataclass, fields
from pyspark.sql import Window
from pyspark.sql.functions import col, row_number, lower
from pyspark.sql.types import StructType, StructField, StringType, BooleanType, TimestampType, IntegerType, LongType
class synapse_extract_utils: 
    def __init__(self, lu: lakehouse_utils):
        self.config_table_uri = f"{lu_config.lakehouse_tables_uri()}config_synapse_extracts"
        self.log_table_uri = f"{lu_config.lakehouse_tables_uri()}log_synapse_extracts"        


    @dataclass
    class SynapseExtractConfig:
        cfg_legacy_synapse_connection_name: str
        source_schema_name: str
        source_table_name: str
        partition_clause: str
        execution_group: int
        active_yn: str

    @dataclass
    class ExecutionLog:
        execution_id: str
        cfg_synapse_connection_name: str
        source_schema_name: str
        source_table_name: str
        extract_file_name: str
        partition_clause: str
        status: str
        error_messages: Optional[str]
        start_date: Optional[int]
        finish_date: Optional[int]
        update_date: Optional[int]

        def get_stuct_type():            
            schema = StructType([
                StructField("execution_id", StringType(), nullable=False),
                StructField("cfg_synapse_connection_name", StringType(), nullable=False),
                StructField("source_schema_name", StringType(), nullable=False),
                StructField("source_table_name", StringType(), nullable=False),
                StructField("extract_file_name", StringType(), nullable=False),
                StructField("partition_clause", StringType(), nullable=False),
                StructField("status", StringType(), nullable=False),
                StructField("error_messages", StringType(), nullable=True),
                StructField("start_date", LongType(), nullable=False),
                StructField("finish_date", LongType(), nullable=False),
                StructField("update_date", LongType(), nullable=False)
            ])

            return schema        

        def to_tuple(instance):
            result = []
            for f in fields(instance):
                val = getattr(instance, f.name)
                result.append(val)
            return tuple(result)

    def insert_log_record(self, record: ExecutionLog):
        def now_int64():
            return int(datetime.utcnow().strftime('%Y%m%d%H%M%S%f')[:-3])

        # Default the dates only if they are not provided
        if record.start_date is None:
            record.start_date = now_int64()

        if record.finish_date is None:
            record.finish_date = now_int64()

        if record.update_date is None:
            record.update_date = now_int64()
        #print(record.to_tuple())       
        df = spark.createDataFrame([record.to_tuple()], schema=synapse_extract_utils.ExecutionLog.get_stuct_type())
        df.write.format("delta").mode("append").save(self.log_table_uri)

    def get_config_items_as_object(self):
        df = spark.read.format("delta").load(self.config_table_uri) 
        df = df.filter(lower(col("active_yn")) == "y")  # optional, adjust if needed
      
        return [synapse_extract_utils.SynapseExtractConfig(**row.asDict()) for row in df.collect()]

    def get_log_items_as_df(self, status_filter=None):
        df = spark.read.format("delta").load(self.log_table_uri)  
        if status_filter:
            df = df.filter(lower(col("status")) == status_filter)  # optional, adjust if needed

        # Define window to get max update_date per unique combination
        window_spec = Window.partitionBy(
            "source_schema_name",
            "source_table_name",
            "partition_clause"
        ).orderBy(col("update_date").desc())

        # Assign row number and filter to only the latest record per group
        df_latest = df.withColumn("row_num", row_number().over(window_spec)) \
                    .filter(col("row_num") == 1) \
                    .drop("row_num")   

        return df_latest

    def get_log_items_as_object(self, status_filter=None):
        df_latest = self.get_log_items_as_df(status_filter)
        return [synapse_extract_utils.ExecutionLog(**row.asDict()) for row in df_latest.collect()]

# METADATA ********************

# META {
# META   "language": "python",
# META   "language_group": "synapse_pyspark"
# META }

# MARKDOWN ********************

# _blockend:sypanase_spark_utils_

# MARKDOWN ********************

# ### Parquet Load Utils

# CELL ********************


lu_config = lakehouse_utils(config_workspace_id, config_lakehouse_id)
cu = config_utils(config_workspace_id, config_lakehouse_id)
configs = cu.get_configs_as_object(fabric_environment)
su = synapse_extract_utils(lu_config)
plu = parquet_load_utils(lu_config)

parquet_load_configs = plu.get_config_items_as_object()
parquet_load_logs = plu.get_log_items_as_object()

synapse_extract_configs = su.get_config_items_as_object()

# Get Last Completed Synapse Extract for each extract 
synapse_extract_logs = su.get_log_items_as_object("completed")


# METADATA ********************

# META {
# META   "language": "python",
# META   "language_group": "synapse_pyspark"
# META }

# MARKDOWN ********************

# ## Get Available Synapse Exports

# CELL ********************

from pyspark.sql.functions import lower, col, row_number
from pyspark.sql import Window, Row

# ----------------------------------------
# 1. Load and filter active config_parquet_loads (select only needed columns)
# ----------------------------------------
config_active = (
    spark.read.format("delta").load(plu.config_table_uri)
    .filter(lower(col("active_yn")) == "y")
    .select(
        "cfg_target_lakehouse_workspace_id",
        "cfg_target_lakehouse_id",
        "cfg_source_lakehouse_workspace_id",
        "cfg_source_lakehouse_id",
        "cfg_legacy_synapse_connection_name",
        "cfg_source_file_path",
        "source_file_path",
        "source_file_name",
        "synapse_source_schema_name",
        "synapse_source_table_name",
        "synapse_partition_clause",
        "target_partition_columns",
        "target_sort_columns",
        "target_replace_where",
        "execution_group"
    )
)
display(config_active)

# ----------------------------------------
# 2. Load and filter latest 'Completed' Synapse Extracts
# ----------------------------------------
synapse_logs = (
    spark.read.format("delta").load(su.log_table_uri)
    .filter(lower(col("status")) == "completed")
    .select(
        "cfg_synapse_connection_name",
        "source_schema_name",
        "source_table_name",
        "partition_clause",
        "update_date"
    )
)

window_synapse = Window.partitionBy(
    "source_schema_name", "source_table_name", "partition_clause"
).orderBy(col("update_date").desc())

synapse_latest = (
    synapse_logs
    .withColumn("row_num", row_number().over(window_synapse))
    .filter(col("row_num") == 1)
    .drop("row_num")
)
display(synapse_latest)

# ----------------------------------------
# 3. Load and filter latest 'Completed' Parquet Loads
# ----------------------------------------
parquet_logs = (
    spark.read.format("delta").load(plu.log_table_uri)
    .filter(lower(col("status")) == "completed")
    .select(
        "cfg_target_lakehouse_workspace_id",
        "cfg_target_lakehouse_id",
        "partition_clause",
        "update_date"
    )
)

window_parquet = Window.partitionBy(
    "cfg_target_lakehouse_workspace_id", "cfg_target_lakehouse_id", "partition_clause"
).orderBy(col("update_date").desc())

parquet_latest = (
    parquet_logs
    .withColumn("row_num", row_number().over(window_parquet))
    .filter(col("row_num") == 1)
    .drop("row_num")
)

# ----------------------------------------
# 4. Join config with synapse_latest (based on schema and table name only)
# ----------------------------------------
joined_with_synapse = config_active.alias("cfgc").join(
    synapse_latest.alias("synl"),
    (col("cfgc.synapse_source_schema_name") == col("synl.source_schema_name")) &
    (col("cfgc.synapse_source_table_name") == col("synl.source_table_name")),
    "inner"
).select(
    "cfgc.cfg_target_lakehouse_workspace_id",    
    "cfgc.cfg_source_lakehouse_workspace_id",    
    "cfgc.cfg_target_lakehouse_id",    
    "cfgc.cfg_source_lakehouse_id",
    "cfgc.cfg_legacy_synapse_connection_name",
    "cfgc.synapse_source_schema_name",
    "cfgc.synapse_source_table_name",  
    "cfgc.cfg_source_file_path",  
    "cfgc.source_file_path", 
    "cfgc.source_file_name",  
    "cfgc.execution_group",  
    "target_partition_columns",
    "target_sort_columns",
    "target_replace_where",                # all config_parquet_loads fields
    "synl.cfg_synapse_connection_name",
    "synl.partition_clause",
    "synl.update_date"
)
display(joined_with_synapse)

# ----------------------------------------
# 5. Left anti join with parquet_latest (exclude completed loads)
# ----------------------------------------
final_result = joined_with_synapse.alias("cfg").join(
    parquet_latest.alias("pqt"),
    (col("cfg.cfg_target_lakehouse_workspace_id") == col("pqt.cfg_target_lakehouse_workspace_id")) &
    (col("cfg.cfg_target_lakehouse_id") == col("pqt.cfg_target_lakehouse_id")) &
    (col("cfg.partition_clause") == col("pqt.partition_clause")),
    "left_anti"
)

display(final_result)

@dataclass
class ParquetLoadConfig:
    cfg_target_lakehouse_workspace_id: str
    cfg_source_lakehouse_workspace_id: str
    cfg_target_lakehouse_id: str
    cfg_source_lakehouse_id: str
    cfg_legacy_synapse_connection_name: str
    synapse_source_schema_name: str
    synapse_source_table_name: str
    cfg_source_file_path: str
    source_file_path: Optional[str] 
    source_file_name: Optional[str]
    execution_group: int
    target_partition_columns: Optional[str]
    target_sort_columns: Optional[str]
    target_replace_where: Optional[str]
    cfg_synapse_connection_name: str
    partition_clause: Optional[str]
    update_date: int  # yyyymmddHHMMSSmmm style timestamp as int

rows: List[Row] = final_result.collect()

table_meta_data: List[ParquetLoadConfig] = [
    ParquetLoadConfig(**row.asDict())
    for row in rows
]


# METADATA ********************

# META {
# META   "language": "python",
# META   "language_group": "synapse_pyspark"
# META }

# MARKDOWN ********************

# ## Functions

# CELL ********************

from dataclasses import dataclass
import notebookutils
import re

def make_hive_table_name_safe(name):
    # Replace all non-alphanumeric characters with underscores
    name = re.sub(r'[^a-zA-Z0-9]', '_', name)
    # Remove leading and trailing underscores
    name = name.strip('_')
    # Make sure the name is not empty
    if not name:
        name = "empty"
    # Make sure the name starts with a letter
    if not name[0].isalpha():
        name = 'table_' + name
    return name.lower()

def make_dataframe_column_names_safe_for_hive(df):
    newColumns = []
    problematic_chars = ' ,;{}()\n\t='
    for column in df.columns:
        column = column.lower()
        column = make_hive_table_name_safe(column)
        #column = column.replace(' ', '_')
        #for c in problematic_chars:
        #    column = column.replace(c, '')
    return df

@dataclass
class FileListing:
    """Class for Files - Attributes: name, directory"""

    def __init__(self, name, directory):
        self.name = name
        self.directory = directory

def walk_directory_using_notebookutils(path, return_leaf_directories: bool):        
        """Walk a directory using notebookutils."""
        # List the files in the directory
        files = notebookutils.mssparkutils.fs.ls(path)

        # Initialize the list of all files
        all_files = []

        # Iterate over the files
        for file in files:
            # If the file is a directory, recursively walk the directory
            if file.isDir and file.name != "_delta_log":
                if(return_leaf_directories):
                   
                    subdirs = [
                        item        # or use item.name if you just want the folder name
                        for item in notebookutils.mssparkutils.fs.ls(file.path)
                        if item.isDir    # or item.isDir() depending on your Fabric SDK version
                    ]                    
                    if(len(subdirs) == 0):
                        #print("Directory Added")
                        directory = os.path.dirname(file.path)+"/"+file.name
                        name = ""
                        all_files.append(FileListing(name='', directory=directory))
                    else:
                         all_files.extend(
                            walk_directory_using_notebookutils(file.path, return_leaf_directories)
                        )
                else:
                    all_files.extend(
                        walk_directory_using_notebookutils(file.path, return_leaf_directories))
            else:
                if not(file.isDir) and file.name != "_delta_log" and not return_leaf_directories:
                    # If the file is not a directory, add it to the list of all files
                    directory = os.path.dirname(file.path)
                    name = file.name
                    # print("File Added")
                    all_files.append(FileListing(
                        name=name, directory=directory))

        return all_files



def get_fct_rowcount(tablename):
    table_name = i.name.split('.')[0]
    #remove the year and month from table name    
    table_name = "_".join(table_name.split("_")[:-2]) 
    count_jan = spark.table(f"{table_name}").where(f"year={load_year}").count()
    print(f"Rows in fact table {table_name} {load_year}     :", count_jan)


def replace_params_in_string(input: str) -> str:
    str = str.replace("@year", load_year)
    str = str.replace("@month", load_month)
    return str

def is_null_or_empty(val):
    # None, empty string (or whitespace-only), or empty list/tuple/set
    return (
        val is None
        or (isinstance(val, str)    and not val.strip())
        or (isinstance(val, (list, tuple, set)) and len(val) == 0)
    )

# METADATA ********************

# META {
# META   "language": "python",
# META   "language_group": "synapse_pyspark"
# META }

# MARKDOWN ********************

# ## Spark Setup and Imports


# CELL ********************

from pyspark.sql import SparkSession
from pyspark.sql.functions import (
    expr,
    lit,
    concat_ws,
    from_unixtime,
    col,
    dayofmonth,
    sum as spark_sum,
    rand,
    floor
)
from datetime import datetime
import calendar
import os
spark = SparkSession.builder.getOrCreate()

spark.conf.set("spark.sql.parquet.int96RebaseModeInRead", "LEGACY")
spark.conf.set("spark.sql.parquet.datetimeRebaseModeInWrite", "LEGACY")

# METADATA ********************

# META {
# META   "language": "python",
# META   "language_group": "synapse_pyspark"
# META }

# MARKDOWN ********************

# ## Run Import for each file

# CELL ********************

import os

# targetdir = 'Files/'
load_dims = True
load_facts = True


for entry in table_meta_data:    
    lu_source = lakehouse_utils(
        configs.get_attribute(entry.cfg_source_lakehouse_workspace_id), 
        configs.get_attribute(entry.cfg_source_lakehouse_id) 
    )

    lu_target = lakehouse_utils(
        configs.get_attribute(entry.cfg_target_lakehouse_workspace_id), 
        configs.get_attribute(entry.cfg_target_lakehouse_id) 
    )
        
    basedir = os.path.dirname(mssparkutils.fs.ls(lu_source.filesdir)[0].path)

    filesdir = lu_source.filesdir

    cfg_source_file_path = configs.get_attribute(entry.cfg_source_file_path)
    partition_columns = entry.target_partition_columns
    sort_columns = ', '.join([f'"{col}"' for col in entry.target_sort_columns])
    replace_where = entry.partition_clause
    
    relative_path = (filesdir + cfg_source_file_path + entry.source_file_path)       
    spark.conf.set("spark.sql.legacy.parquet.nanosAsLong", "true")
    if(return_leaf_directories):
        spark_load_path = relative_path 
    else:
        spark_load_path = relative_path + "/" + entry.source_file_name
    # print(entry)
    # print(spark_load_path)    
    df_batch = spark.read.format("parquet").load(spark_load_path)
    

    # build up the basic writer
    writer = (
        df_batch
        .write
        .format("delta")
        .mode("overwrite")
        .option("mergeSchema", "true")
    )

    # Todo: Check if table exists in target and only add replace if it does
    if not is_null_or_empty(entry.partition_clause):
        print('adding replace: ' + entry.partition_clause)
        writer.option("replaceWhere", entry.partition_clause)

    if not is_null_or_empty(entry.target_partition_columns):
        print('adding partition')
        if isinstance(entry.target_partition_columns, str):
            cols = [c.strip() for c in entry.target_partition_columns.split(",") if c.strip()]
        else:
            cols = entry.target_partition_columns
        writer = writer.partitionBy(*cols)
        
    # finally, save
    table_name = f"{entry.synapse_source_schema_name}_{entry.synapse_source_table_name}"
    writer.saveAsTable(table_name)    
    
    #print(f"Finished partition based load of {table_name} Year: {year_from_file}, Month: {month_from_file}, SortColumns : {sort_columns}")        
    #get_fct_rowcount(table_name)
    
    
    

# METADATA ********************

# META {
# META   "language": "python",
# META   "language_group": "synapse_pyspark"
# META }

# MARKDOWN ********************

# # 🛑 Execution Stop

# CELL ********************

#Exit to prevent spark sql debug cell running 
mssparkutils.notebook.exit("success")

# METADATA ********************

# META {
# META   "language": "python",
# META   "language_group": "synapse_pyspark"
# META }

# CELL ********************

for i in walk_directory_using_notebookutils(source_directory, True):    
    absolute_path = i.directory    
    relative_path = (filesdir + i.directory.replace(basedir, '')).replace("//", "/")        
    spark.conf.set("spark.sql.legacy.parquet.nanosAsLong", "true")
    df_month_batch = spark.read.format("parquet").load(relative_path + "/" + i.name)

    partition_columns = None
    sort_columns = None
    year = None
    month = None    
    # Look up the table name in the metadata

# METADATA ********************

# META {
# META   "language": "python",
# META   "language_group": "synapse_pyspark"
# META }

# CELL ********************

import os
filesdir = 'Files/'
basedir = os.path.dirname(mssparkutils.fs.ls(filesdir)[0].path)
# targetdir = 'Files/'
load_dims = True
load_facts = True

for i in walk_directory_using_notebookutils(source_directory):    
    absolute_path = i.directory
    relative_path = (filesdir + i.directory.replace(basedir, '')).replace("//", "/")
    print(i.name)
    spark.conf.set("spark.sql.legacy.parquet.nanosAsLong", "true")
    df_month_batch = spark.read.format("parquet").load(relative_path + "/" + i.name)
   
    # Extract year and month from the end of i.name
    m = re.search(r'(\d{4})_(0?\d{1,2})', i.name)
    
    # Split name to get the table_name
    table_name = i.name.split('.')[0]    
    Lookup_table_name = "_".join(table_name.split("_")[:-2])
    #print(f'Lookup Table Name: {Lookup_table_name}')

    # Initialize variables for the lookup
    partition_columns = None
    sort_columns = None
    year = None
    month = None    
    # Look up the table name in the metadata
    for entry in table_meta_data:
        if entry["table_name"] == Lookup_table_name:
            partition_columns = entry["partition_columns"]
            sort_columns = ', '.join([f'"{col}"' for col in entry["sort_columns"]])
            replace_where = entry["replaceWhere"]
            # Extract year and month from replaceWhere
            year = replace_where.split("AND")[0].split("=")[1].strip()  # Extracts '@year_from_file'
            month = replace_where.split("AND")[1].split("=")[1].strip()  # Extracts '@month_from_file'
            break

    # # Output the results for the current table
    # print(f'Lookup Table Name: {Lookup_table_name}')
    # print(f'Partition Columns: {partition_columns}')
    # print(f'Sort Columns: {sort_columns}')
    # print(f'Year: {year}')
    # print(f'Month: {month}')

    #remove the year and month from table name    
    if m:
        if load_facts:
            year_from_file = int(m.group(1))
            month_from_file = int(m.group(2))
            table_name = "_".join(table_name.split("_")[:-2])        
            (df_month_batch
            .write
            .format("delta")
            .mode("overwrite")
            .option("replaceWhere", f"year = {year_from_file} AND month = {month_from_file}")
            .option("mergeSchema", "true")
            #.option("overwriteSchema", "true")
            .partitionBy("year", "month")
            .saveAsTable(table_name)
            )
            print(f"Finished partition based load of {table_name} Year: {year_from_file}, Month: {month_from_file}, SortColumns : {sort_columns}")
            #get the row count of each loaded table
            get_fct_rowcount(table_name)
            # print(f"Started VOrder partition")
            # vorder(table_name,sort_columns)           # WIP sort columns parameter need to sent like an array


    else:
        if load_dims:            
            year = None
            month = None
            (df_month_batch
            .write
            .format("delta")
            .mode("overwrite") 
            .option("mergeSchema", "true")                     
            #.option("overwriteSchema", "true")
            #.saveAsTable(table_name)
            .saveAsTable(table_name)
            )
            print(f"Finished full load of {table_name}")
            #get the row count of each loaded table
            print("Rows in {table_name}     :", df_month_batch.count())

# METADATA ********************

# META {
# META   "language": "python",
# META   "language_group": "synapse_pyspark"
# META }

# MARKDOWN ********************


# MARKDOWN ********************

# ## Documentation


# CELL ********************

if debug == True:
    %pip install diagrams
    %pip install cairosvg

# METADATA ********************

# META {
# META   "language": "python",
# META   "language_group": "synapse_pyspark"
# META }

# CELL ********************

import requests, base64
from diagrams import Diagram, Edge, Node, Cluster
from diagrams.azure.analytics import SynapseAnalytics
from diagrams.azure.storage import DataLakeStorage
from diagrams.onprem.compute import Server
from diagrams.generic.storage import Storage
from urllib.request import urlretrieve
from diagrams.custom import Custom
import cairosvg

fabric_icons = ["notebook","data_warehouse","links", "lakehouse", "pipeline"]

page = "https://raw.githubusercontent.com/FabricTools/fabric-icons/refs/heads/main/node_modules/%40fabric-msft/svg-icons/dist/svg"
for f in fabric_icons:
  icon_svg = f"{f}_64_item.svg"
  url = f"{page}/{icon_svg}"
  icon_png = f"{f}_64_item.png"
  cairosvg.svg2png(url=url,write_to=icon_png, dpi=1000) 

with Diagram("Load Parquet to Lakehouse Tables", show=False, outformat="png", filename="arch_notebook"):
   
    with Cluster("Azure"):      
      adls = DataLakeStorage("ADLS Storage")


    with Cluster("Fabric"):
        
        lh_source = Custom("Source LH", "lakehouse_64_item.png")
        lh_target = Custom("Target LH", "lakehouse_64_item.png")
        config_wh = Custom("Configuration WH", "data_warehouse_64_item.png")        
        load_lh = Custom(
            "load_to_lh_tables", 
            "notebook_64_item.png",
            style="filled,bold",
            fillcolor="lightgoldenrod",
            color="goldenrod") # Highlight this notebook in yellow
        shortcuts = Custom("shorcuts", "links_64_item.png")
        
    
    adls >>  Edge(label="Virtualisation") >> shortcuts    
    shortcuts >>  Edge(label="Virtualisation") >> lh_source
    
    lh_source >> Edge(label="(2) Read Parquet") >> load_lh
    lh_target << Edge(label="(3) Write to Tables (optimised)") << load_lh
   
    load_lh >> Edge(label="(1) Read Config") >> config_wh
    load_lh << Edge(label="(4) Write Logs") << config_wh


from IPython.display import Image, display
if debug == True:
    # Display Image
    img_path = "arch_notebook.png"  # Please update the path if image.png is located elsewhere
    display(Image(filename=img_path))


# METADATA ********************

# META {
# META   "language": "python",
# META   "language_group": "synapse_pyspark"
# META }

# MARKDOWN ********************

# ## Get Configurations and Completed Exports - Legacy from old DW code
# ⚠️ Warning: .collect() pulls all data into driver memory. Only do this if vw_parquet_loads is known to be small enough to fit comfortably.

# CELL ********************

import com.microsoft.spark.fabric
from com.microsoft.spark.fabric.Constants import Constants

df_parquet_load_config = spark.read.option(
    Constants.WorkspaceId, f"{configuration_database_workspace_id}").option(
        Constants.DatawarehouseId, f"{configuration_database_warehouse_id}").option(
            Constants.DatabaseName, configuration_database_warehouse_name).synapsesql(
                f"select * from [vw_parquet_loads]")

from dataclasses import dataclass
from typing import Optional, List
import pyspark.sql

# 1. Define your config class
@dataclass
class ParquetLoadConfig:
    target_lakehouse_workspace_id: str
    target_lakehouse_name: str
    target_partition_columns: Optional[str]
    target_sort_columns: Optional[str]
    target_replace_where: Optional[str]
    source_lakehouse_workspace_id: str
    source_lakehouse_name: str
    source_file_path: str
    source_file_name: str
    synapse_connection_name: str
    synapse_source_schema_name: str
    synapse_source_table_name: str
    synapse_partition_clause: Optional[str]
    execution_group: int
    active_yn: str
    synapse_extract_status: str
    synapse_exctract_execution_id: str

# 2. Collect and convert
rows: List[pyspark.sql.Row] = df_parquet_load_config.collect()

table_meta_data: List[ParquetLoadConfig] = [
    ParquetLoadConfig(**row.asDict())
    for row in rows
]





# METADATA ********************

# META {
# META   "language": "python",
# META   "language_group": "synapse_pyspark"
# META }

# MARKDOWN ********************

# ## Dummy Data Inserts

# CELL ********************

# Insert Dummy Data 
if True == False: # Dummy Data INsert for debugging
    blah = su.ExecutionLog(
        execution_id="saadx",
        cfg_synapse_connection_name="synapse_connection",
        source_schema_name="dbo",
        source_table_name="dim_customer",
        extract_file_name="",
        partition_clause="",    
        status="Completed", 
        error_messages=None,
        start_date=None,
        finish_date=None, 
        update_date=None
    )

    su.insert_log_record(blah)


# METADATA ********************

# META {
# META   "language": "python",
# META   "language_group": "synapse_pyspark"
# META }

# CELL ********************



schema = StructType([
        StructField("cfg_target_lakehouse_workspace_id", StringType(), nullable=False),
        StructField("cfg_target_lakehouse_id", StringType(), nullable=False),
        StructField("target_partition_columns", StringType(), nullable=False),
        StructField("target_sort_columns", StringType(), nullable=False),
        StructField("target_replace_where", StringType(), nullable=False),

        StructField("cfg_source_lakehouse_workspace_id", StringType(), nullable=False),
        StructField("cfg_source_lakehouse_id", StringType(), nullable=False),
        StructField("cfg_source_file_path", StringType(), nullable=False),
        StructField("source_file_path", StringType(), nullable=False),
        StructField("source_file_name", StringType(), nullable=False),

        StructField("cfg_legacy_synapse_connection_name", StringType(), nullable=False),
        StructField("synapse_source_schema_name", StringType(), nullable=False),
        StructField("synapse_source_table_name", StringType(), nullable=False),
        StructField("synapse_partition_clause", StringType(), nullable=False),

        StructField("execution_group", IntegerType(), nullable=False),
        StructField("active_yn", StringType(), nullable=False)
    ])


empty_df = spark.createDataFrame([], schema)
(
    empty_df.write.format("delta")
    .option("parquet.vorder.default", "true")
    .mode("overwrite")  # will error if table exists; change to "overwrite" to replace.
    .save(
        f"{lu_config.lakehouse_tables_uri()}config_parquet_loads"  # noqa: E501
    )
)

schema = StructType([
        StructField("cfg_target_lakehouse_workspace_id", StringType(), nullable=False),
        StructField("cfg_target_lakehouse_id", StringType(), nullable=False),
        StructField("target_partition_columns", StringType(), nullable=False),
        StructField("target_sort_columns", StringType(), nullable=False),
        StructField("target_replace_where", StringType(), nullable=False),

        StructField("cfg_source_lakehouse_workspace_id", StringType(), nullable=False),
        StructField("cfg_source_lakehouse_id", StringType(), nullable=False),
        StructField("cfg_source_file_path", StringType(), nullable=False),
        StructField("source_file_path", StringType(), nullable=False),
        StructField("source_file_name", StringType(), nullable=False),

        StructField("cfg_legacy_synapse_connection_name", StringType(), nullable=False),
        StructField("synapse_source_schema_name", StringType(), nullable=False),
        StructField("synapse_source_table_name", StringType(), nullable=False),
        StructField("synapse_partition_clause", StringType(), nullable=False),

        StructField("execution_group", IntegerType(), nullable=False),
        StructField("active_yn", StringType(), nullable=False)
    ])

empty_df = spark.createDataFrame([], schema)
(
    empty_df.write
    .format("delta")
    .option("parquet.vorder.default","true")
    .option("mergeSchema", "true")
    .mode("overwrite")  # will error if table exists; change to "overwrite" to replace.
    .save(f"{lu_config.lakehouse_tables_uri()}config_parquet_loads")
)
schema = StructType([
        StructField("cfg_target_lakehouse_workspace_id", StringType(), nullable=False),
        StructField("cfg_target_lakehouse_id", StringType(), nullable=False),
        StructField("target_partition_columns", StringType(), nullable=False),
        StructField("target_sort_columns", StringType(), nullable=False),
        StructField("target_replace_where", StringType(), nullable=False),

        StructField("cfg_source_lakehouse_workspace_id", StringType(), nullable=False),
        StructField("cfg_source_lakehouse_id", StringType(), nullable=False),
        StructField("cfg_source_file_path", StringType(), nullable=False),
        StructField("source_file_path", StringType(), nullable=False),
        StructField("source_file_name", StringType(), nullable=False),

        StructField("cfg_legacy_synapse_connection_name", StringType(), nullable=False),
        StructField("synapse_source_schema_name", StringType(), nullable=False),
        StructField("synapse_source_table_name", StringType(), nullable=False),
        StructField("synapse_partition_clause", StringType(), nullable=False),

        StructField("execution_group", IntegerType(), nullable=False),
        StructField("active_yn", StringType(), nullable=False)
    ])


# ──────────────────────────────────────────────────────────────────────────────
# Build the data rows
# ──────────────────────────────────────────────────────────────────────────────
data = [
    (
        "edw_workspace_id",
        "edw_lakehouse_id",
        "",  # target_partition_columns
        "",  # target_sort_columns
        "",  # target_replace_where

        "edw_workspace_id",
        "edw_lakehouse_id",
        "synapse_export_shortcut_path_in_onelake",
        "dbo_dim_customer",
        "",

        "legacy_synapse_connection_name",
        "dbo",
        "dim_customer",
        "",

        1,
        "Y"
    ),
    (
        "edw_workspace_id",
        "edw_lakehouse_id",
        "year, month",
        "year, month",
        "WHERE year = @year AND month = @month",

        "edw_workspace_id",
        "edw_lakehouse_id",
        "synapse_export_shortcut_path_in_onelake",
        "dbo_fact_transactions",
        "",

        "legacy_synapse_connection_name",
        "dbo",
        "fact_transactions",
        "WHERE year = @year AND month = @month",

        1,
        "Y"
    ),
]

insert_df = spark.createDataFrame(data, schema)

# 3. Append to the existing Delta table
table_path = f"{lu_config.lakehouse_tables_uri()}config_parquet_loads" 

insert_df.write \
    .format("delta") \
    .mode("append") \
    .save(table_path)



# METADATA ********************

# META {
# META   "language": "python",
# META   "language_group": "synapse_pyspark"
# META }
