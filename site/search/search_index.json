{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Ingenious Fabric Accelerator","text":"<p>Ingenious for Fabric is a comprehensive command line tool built with Typer that helps create and manage Microsoft Fabric assets. It provides a complete development workflow for Fabric workspaces, including project initialization, DDL notebook generation, environment management, and deployment automation.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Project Initialization: Create new Fabric workspace projects with proper structure and templates</li> <li>DDL Notebook Generation: Generate DDL notebooks from Jinja templates for both lakehouses and warehouses</li> <li>Environment Management: Deploy and manage artifacts across multiple environments (development, test, production)</li> <li>Orchestrator Notebooks: Create orchestrator notebooks to run generated notebooks in sequence</li> <li>Notebook Utilities: Scan and analyze existing notebook code and content</li> <li>Testing Framework: Test notebooks both locally and on the Fabric platform</li> <li>Python Libraries: Reusable Python and PySpark libraries for common Fabric operations</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#initialize-a-new-project","title":"Initialize a New Project","text":"<pre><code># Create a new Fabric workspace project\ningen_fab init solution --project-name \"My Fabric Project\"\n</code></pre>"},{"location":"#generate-ddl-notebooks","title":"Generate DDL Notebooks","text":"<pre><code># Generate DDL notebooks for warehouses\ningen_fab ddl compile-notebooks \\\n    --output-mode fabric \\\n    --generation-mode warehouse\n\n# Generate DDL notebooks for lakehouses  \ningen_fab ddl compile-notebooks \\\n    --output-mode fabric \\\n    --generation-mode lakehouse\n</code></pre>"},{"location":"#deploy-to-environment","title":"Deploy to Environment","text":"<pre><code># Deploy to development environment\ningen_fab deploy to-environment \\\n    --fabric-workspace-repo-dir . \\\n    --fabric-environment development\n</code></pre>"},{"location":"#getting-started","title":"Getting Started","text":"<p>New to Ingenious Fabric Accelerator?</p> <p>Start with our Installation Guide to get up and running quickly.</p> <p>Ready to dive in?</p> <p>Check out our Sample Project for a complete walkthrough.</p>"},{"location":"#architecture","title":"Architecture","text":"<p>The tool is organized into several key components:</p> <pre><code>ingen_fab/\n\u251c\u2500\u2500 cli_utils/            # CLI command implementations\n\u251c\u2500\u2500 ddl_scripts/          # Jinja templates for DDL notebook generation\n\u251c\u2500\u2500 notebook_utils/       # Notebook scanning and injection helpers\n\u251c\u2500\u2500 python_libs/          # Shared Python and PySpark libraries\n\u251c\u2500\u2500 python_libs_tests/    # Test suites for Python libraries\nsample_project/           # Example workspace demonstrating project layout\nproject_templates/        # Templates for new project initialization\n</code></pre>"},{"location":"#command-groups","title":"Command Groups","text":"<ul> <li><code>init</code> - Initialize solutions and projects</li> <li><code>ddl</code> - Compile DDL notebooks from templates</li> <li><code>deploy</code> - Deploy to environments and manage workspace items</li> <li><code>notebook</code> - Manage and scan notebook content</li> <li><code>test</code> - Test notebooks and Python blocks (local and platform)</li> </ul>"},{"location":"#core-concepts","title":"Core Concepts","text":""},{"location":"#environment-management","title":"Environment Management","text":"<p>Manage multiple environments (development, test, production) with environment-specific configurations and variable libraries.</p>"},{"location":"#ddl-script-management","title":"DDL Script Management","text":"<p>Organize DDL scripts in numbered sequence for controlled execution, supporting both SQL and Python scripts with idempotent execution.</p>"},{"location":"#notebook-generation","title":"Notebook Generation","text":"<p>Automatically generate notebooks from templates with proper error handling, logging, and orchestration capabilities.</p>"},{"location":"#testing-framework","title":"Testing Framework","text":"<p>Comprehensive testing framework supporting both local development and Fabric platform testing.</p>"},{"location":"#next-steps","title":"Next Steps","text":"<ul> <li> <p> Get Started</p> <p>Install and configure Ingenious Fabric Accelerator</p> <p> Installation Guide</p> </li> <li> <p> User Guide</p> <p>Learn how to use all features and commands</p> <p> User Guide</p> </li> <li> <p> Developer Guide</p> <p>Understand the architecture and extend functionality</p> <p> Developer Guide</p> </li> <li> <p> Examples</p> <p>See real-world examples and best practices</p> <p> Examples</p> </li> </ul>"},{"location":"#support","title":"Support","text":"<ul> <li>Issues: Report bugs and request features on GitHub Issues</li> <li>Discussions: Join community discussions on GitHub Discussions</li> <li>Documentation: Browse the complete documentation on this site</li> </ul>"},{"location":"developer_guide/","title":"Developer Guide","text":"<p>Welcome to the Developer Guide for the Ingenious Fabric Accelerator! This section is designed for developers who want to understand the architecture, extend functionality, or contribute to the project.</p>"},{"location":"developer_guide/#architecture-overview","title":"Architecture Overview","text":"<p>The Ingenious Fabric Accelerator is built with a modular architecture that separates concerns and enables extensibility:</p> <pre><code>graph TD\n    A[CLI Interface] --&gt; B[Command Modules]\n    B --&gt; C[Core Libraries]\n    C --&gt; D[Python Libraries]\n    C --&gt; E[PySpark Libraries]\n    C --&gt; F[Template Engine]\n    D --&gt; G[Fabric Runtime]\n    E --&gt; G\n    F --&gt; H[Generated Notebooks]\n    H --&gt; G</code></pre>"},{"location":"developer_guide/#core-components","title":"Core Components","text":""},{"location":"developer_guide/#python-libraries","title":"Python Libraries","text":"<p>Reusable Python and PySpark libraries that provide common functionality for Fabric workspaces.</p>"},{"location":"developer_guide/#ddl-scripts","title":"DDL Scripts","text":"<p>Template system for generating DDL notebooks from SQL and Python scripts.</p>"},{"location":"developer_guide/#notebook-utils","title":"Notebook Utils","text":"<p>Environment-agnostic utilities that work in both local development and Fabric runtime.</p>"},{"location":"developer_guide/#sql-templates","title":"SQL Templates","text":"<p>Jinja-based SQL template system supporting multiple database dialects.</p>"},{"location":"developer_guide/#development-setup","title":"Development Setup","text":""},{"location":"developer_guide/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.12+</li> <li>Git</li> <li>IDE with Python support (VS Code, PyCharm, etc.)</li> <li>Docker (optional, for containerized development)</li> </ul>"},{"location":"developer_guide/#clone-and-setup","title":"Clone and Setup","text":"<pre><code># Clone the repository\ngit clone https://github.com/your-org/ingen_fab.git\ncd ingen_fab\n\n# Set up development environment\nuv sync --all-extras\n\n# Install pre-commit hooks\npre-commit install\n\n# Verify installation\ningen_fab --help\n</code></pre>"},{"location":"developer_guide/#development-dependencies","title":"Development Dependencies","text":"<p>The project uses several development tools:</p> <ul> <li>Testing: pytest, pytest-cov, pytest-asyncio</li> <li>Linting: ruff, vulture</li> <li>Type checking: mypy (optional)</li> <li>Documentation: mkdocs, mkdocs-material</li> <li>Pre-commit: pre-commit hooks for code quality</li> </ul>"},{"location":"developer_guide/#project-structure","title":"Project Structure","text":"<pre><code>ingen_fab/\n\u251c\u2500\u2500 cli_utils/              # CLI command implementations\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 deploy_commands.py  # Deployment commands\n\u2502   \u251c\u2500\u2500 init_commands.py    # Project initialization\n\u2502   \u251c\u2500\u2500 notebook_commands.py # Notebook management\n\u2502   \u2514\u2500\u2500 workspace_commands.py # Workspace operations\n\u251c\u2500\u2500 ddl_scripts/            # DDL template system\n\u2502   \u251c\u2500\u2500 _templates/         # Jinja templates\n\u2502   \u251c\u2500\u2500 notebook_generator.py # Template processor\n\u2502   \u2514\u2500\u2500 README.md\n\u251c\u2500\u2500 notebook_utils/         # Notebook utilities\n\u2502   \u251c\u2500\u2500 fabric_cli_notebook.py\n\u2502   \u251c\u2500\u2500 simple_notebook.py\n\u2502   \u2514\u2500\u2500 templates/\n\u251c\u2500\u2500 python_libs/            # Core Python libraries\n\u2502   \u251c\u2500\u2500 common/            # Shared utilities\n\u2502   \u251c\u2500\u2500 interfaces/        # Abstract interfaces\n\u2502   \u251c\u2500\u2500 python/           # CPython implementations\n\u2502   \u2514\u2500\u2500 pyspark/          # PySpark implementations\n\u251c\u2500\u2500 python_libs_tests/     # Test suites\n\u251c\u2500\u2500 cli.py                 # Main CLI entry point\n\u2514\u2500\u2500 project_config.py      # Project configuration\n</code></pre>"},{"location":"developer_guide/#development-workflow","title":"Development Workflow","text":""},{"location":"developer_guide/#1-feature-development","title":"1. Feature Development","text":"<pre><code># Create feature branch\ngit checkout -b feature/new-feature\n\n# Make changes\n# ... develop your feature ...\n\n# Run tests\npytest ./tests/ -v\npytest ./ingen_fab/python_libs_tests/ -v\n\n# Check code quality\nruff check .\nruff format .\n\n# Commit changes\ngit add .\ngit commit -m \"Add new feature: description\"\n</code></pre>"},{"location":"developer_guide/#2-testing","title":"2. Testing","text":"<pre><code># Run all tests\npytest\n\n# Run specific test modules\npytest ./tests/test_cli.py -v\npytest ./ingen_fab/python_libs_tests/python/test_warehouse_utils_pytest.py -v\n\n# Run with coverage\npytest --cov=ingen_fab --cov-report=html\n\n# Test CLI commands\ningen_fab test local libraries --base-dir .\n</code></pre>"},{"location":"developer_guide/#3-documentation","title":"3. Documentation","text":"<pre><code># Serve documentation locally\nmkdocs serve\n\n# Build documentation\nmkdocs build\n\n# Deploy documentation\nmkdocs gh-deploy\n</code></pre>"},{"location":"developer_guide/#adding-new-features","title":"Adding New Features","text":""},{"location":"developer_guide/#adding-a-new-cli-command","title":"Adding a New CLI Command","text":"<ol> <li> <p>Create command module:    <pre><code># cli_utils/my_new_commands.py\nimport typer\nfrom typing_extensions import Annotated\n\ndef my_new_command(\n    param: Annotated[str, typer.Option(help=\"Description\")]\n):\n    \"\"\"My new command description.\"\"\"\n    print(f\"Executing with param: {param}\")\n</code></pre></p> </li> <li> <p>Register command in CLI:    <pre><code># cli.py\nfrom cli_utils import my_new_commands\n\n# Add command to app\napp.add_typer(\n    my_new_commands.app,\n    name=\"mynew\",\n    help=\"My new command group\"\n)\n</code></pre></p> </li> <li> <p>Add tests:    <pre><code># tests/test_my_new_commands.py\nfrom typer.testing import CliRunner\nfrom ingen_fab.cli import app\n\ndef test_my_new_command():\n    runner = CliRunner()\n    result = runner.invoke(app, [\"mynew\", \"command\", \"--param\", \"value\"])\n    assert result.exit_code == 0\n</code></pre></p> </li> </ol>"},{"location":"developer_guide/#adding-a-new-python-library","title":"Adding a New Python Library","text":"<ol> <li> <p>Create the library:    <pre><code># python_libs/python/my_new_utils.py\nfrom typing import Any\nfrom .notebook_utils_abstraction import get_notebook_utils\n\nclass MyNewUtils:\n    def __init__(self):\n        self.notebook_utils = get_notebook_utils()\n\n    def my_function(self) -&gt; Any:\n        \"\"\"New utility function.\"\"\"\n        return \"result\"\n</code></pre></p> </li> <li> <p>Create tests:    <pre><code># python_libs_tests/python/test_my_new_utils_pytest.py\nimport pytest\nfrom ingen_fab.python_libs.python.my_new_utils import MyNewUtils\n\ndef test_my_function():\n    utils = MyNewUtils()\n    result = utils.my_function()\n    assert result == \"result\"\n</code></pre></p> </li> <li> <p>Add to template injection:    <pre><code># python_libs/gather_python_libs.py\n# Add your library to the collection process\n</code></pre></p> </li> </ol>"},{"location":"developer_guide/#adding-a-new-ddl-template","title":"Adding a New DDL Template","text":"<ol> <li> <p>Create templates:    <pre><code>&lt;!-- ddl_scripts/_templates/common/my_new_template.py.jinja --&gt;\n# Generated DDL script for {{ entity_name }}\nfrom my_new_utils import MyNewUtils\n\nutils = MyNewUtils()\nresult = utils.my_function()\nprint(f\"Result: {result}\")\n</code></pre></p> </li> <li> <p>Update notebook generator:    <pre><code># ddl_scripts/notebook_generator.py\n# Add template to the generation process\n</code></pre></p> </li> </ol>"},{"location":"developer_guide/#code-standards","title":"Code Standards","text":""},{"location":"developer_guide/#python-style","title":"Python Style","text":"<ul> <li>Follow PEP 8 style guidelines</li> <li>Use type hints where appropriate</li> <li>Write docstrings for all public functions</li> <li>Use meaningful variable and function names</li> </ul>"},{"location":"developer_guide/#testing","title":"Testing","text":"<ul> <li>Write tests for all new functionality</li> <li>Aim for &gt;80% code coverage</li> <li>Use descriptive test names</li> <li>Test both success and failure cases</li> </ul>"},{"location":"developer_guide/#documentation","title":"Documentation","text":"<ul> <li>Update documentation for new features</li> <li>Include code examples</li> <li>Write clear, concise explanations</li> <li>Update CLI help text</li> </ul>"},{"location":"developer_guide/#debugging","title":"Debugging","text":""},{"location":"developer_guide/#local-development","title":"Local Development","text":"<pre><code># Run with verbose output\ningen_fab --help\n\n# Debug specific commands\npython -m debugpy --listen 5678 --wait-for-client -m ingen_fab.cli ddl compile-notebooks --help\n\n# Use logging\nimport logging\nlogging.basicConfig(level=logging.DEBUG)\n</code></pre>"},{"location":"developer_guide/#testing-issues","title":"Testing Issues","text":"<pre><code># Run specific test\npytest ./tests/test_cli.py::test_specific_function -v -s\n\n# Debug test failures\npytest ./tests/test_cli.py::test_specific_function --pdb\n\n# Check test coverage\npytest --cov=ingen_fab --cov-report=term-missing\n</code></pre>"},{"location":"developer_guide/#contributing","title":"Contributing","text":""},{"location":"developer_guide/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Fork the repository</li> <li>Create feature branch</li> <li>Make changes with tests</li> <li>Update documentation</li> <li>Submit pull request</li> </ol>"},{"location":"developer_guide/#code-review-checklist","title":"Code Review Checklist","text":"<ul> <li> Code follows style guidelines</li> <li> Tests are included and passing</li> <li> Documentation is updated</li> <li> No breaking changes (or properly documented)</li> <li> Performance impact is considered</li> </ul>"},{"location":"developer_guide/#advanced-topics","title":"Advanced Topics","text":""},{"location":"developer_guide/#custom-template-development","title":"Custom Template Development","text":"<p>Learn how to create custom templates for specific use cases.</p>"},{"location":"developer_guide/#plugin-architecture","title":"Plugin Architecture","text":"<p>Understand how to extend the CLI with plugins.</p>"},{"location":"developer_guide/#performance-optimization","title":"Performance Optimization","text":"<p>Best practices for optimizing generation and deployment performance.</p>"},{"location":"developer_guide/#integration-testing","title":"Integration Testing","text":"<p>Setting up comprehensive integration tests with Fabric.</p>"},{"location":"developer_guide/#resources","title":"Resources","text":""},{"location":"developer_guide/#internal-documentation","title":"Internal Documentation","text":"<ul> <li>Python Libraries - Detailed library documentation</li> <li>DDL Scripts - Template system guide</li> <li>Notebook Utils - Utility abstractions</li> <li>SQL Templates - SQL template reference</li> </ul>"},{"location":"developer_guide/#external-resources","title":"External Resources","text":"<ul> <li>Typer Documentation</li> <li>Jinja2 Documentation</li> <li>Microsoft Fabric Documentation</li> <li>pytest Documentation</li> </ul>"},{"location":"developer_guide/#getting-help","title":"Getting Help","text":"<ul> <li>Documentation: This site covers most development topics</li> <li>Issues: Report bugs or request features on GitHub</li> <li>Discussions: Join community discussions for questions</li> <li>Code Review: Submit pull requests for feedback</li> </ul> <p>Ready to contribute? Start with the Python Libraries guide to understand the core architecture!</p>"},{"location":"developer_guide/python_libraries/","title":"Python Libraries","text":"<p>The Python libraries are the heart of the Ingenious Fabric Accelerator, providing reusable components that work seamlessly across both local development and Fabric runtime environments.</p>"},{"location":"developer_guide/python_libraries/#architecture","title":"Architecture","text":"<p>The library architecture follows a layered approach:</p> <pre><code>graph TB\n    A[Fabric Notebooks] --&gt; B[Generated Code]\n    B --&gt; C[Library Interfaces]\n    C --&gt; D[Common Utilities]\n    C --&gt; E[Python Implementation]\n    C --&gt; F[PySpark Implementation]\n    E --&gt; G[Local Development]\n    F --&gt; H[Fabric Runtime]\n    D --&gt; G\n    D --&gt; H</code></pre>"},{"location":"developer_guide/python_libraries/#directory-structure","title":"Directory Structure","text":"<pre><code>python_libs/\n\u251c\u2500\u2500 common/                    # Shared utilities\n\u2502   \u251c\u2500\u2500 config_utils.py       # Configuration management\n\u2502   \u251c\u2500\u2500 data_utils.py         # Data processing utilities\n\u2502   \u2514\u2500\u2500 workflow_utils.py     # Workflow orchestration\n\u251c\u2500\u2500 interfaces/               # Abstract interfaces\n\u2502   \u251c\u2500\u2500 data_store_interface.py\n\u2502   \u2514\u2500\u2500 ddl_utils_interface.py\n\u251c\u2500\u2500 python/                   # CPython implementations\n\u2502   \u251c\u2500\u2500 ddl_utils.py          # DDL execution utilities\n\u2502   \u251c\u2500\u2500 lakehouse_utils.py    # Lakehouse operations\n\u2502   \u251c\u2500\u2500 notebook_utils_abstraction.py\n\u2502   \u251c\u2500\u2500 pipeline_utils.py     # Pipeline utilities\n\u2502   \u251c\u2500\u2500 sql_template_factory/ # SQL template system\n\u2502   \u2514\u2500\u2500 warehouse_utils.py    # Warehouse operations\n\u251c\u2500\u2500 pyspark/                  # PySpark implementations\n\u2502   \u251c\u2500\u2500 ddl_utils.py          # Spark DDL utilities\n\u2502   \u251c\u2500\u2500 lakehouse_utils.py    # Spark lakehouse operations\n\u2502   \u251c\u2500\u2500 notebook_utils_abstraction.py\n\u2502   \u2514\u2500\u2500 parquet_load_utils.py # Parquet processing\n\u2514\u2500\u2500 gather_python_libs.py    # Library collection script\n</code></pre>"},{"location":"developer_guide/python_libraries/#core-components","title":"Core Components","text":""},{"location":"developer_guide/python_libraries/#common-utilities","title":"Common Utilities","text":""},{"location":"developer_guide/python_libraries/#config_utilspy","title":"<code>config_utils.py</code>","text":"<p>Configuration management with environment-specific settings:</p> <pre><code>from common.config_utils import FabricConfig\n\n# Load configuration from environment\nconfig = FabricConfig.from_environment()\n\n# Access configuration values\nworkspace_id = config.workspace_id\nlakehouse_id = config.lakehouse_id\n</code></pre>"},{"location":"developer_guide/python_libraries/#data_utilspy","title":"<code>data_utils.py</code>","text":"<p>Data processing and validation utilities:</p> <pre><code>from common.data_utils import DataValidator, DataTransformer\n\n# Validate data\nvalidator = DataValidator()\nis_valid = validator.validate_schema(dataframe, expected_schema)\n\n# Transform data\ntransformer = DataTransformer()\ncleaned_data = transformer.clean_data(dataframe)\n</code></pre>"},{"location":"developer_guide/python_libraries/#workflow_utilspy","title":"<code>workflow_utils.py</code>","text":"<p>Workflow orchestration and dependency management:</p> <pre><code>from common.workflow_utils import WorkflowOrchestrator\n\n# Create workflow\norchestrator = WorkflowOrchestrator()\norchestrator.add_task(\"task1\", dependencies=[])\norchestrator.add_task(\"task2\", dependencies=[\"task1\"])\norchestrator.execute()\n</code></pre>"},{"location":"developer_guide/python_libraries/#interfaces","title":"Interfaces","text":""},{"location":"developer_guide/python_libraries/#data_store_interfacepy","title":"<code>data_store_interface.py</code>","text":"<p>Abstract interface for data store operations:</p> <pre><code>from abc import ABC, abstractmethod\n\nclass DataStoreInterface(ABC):\n    @abstractmethod\n    def read_table(self, table_name: str) -&gt; Any:\n        pass\n\n    @abstractmethod\n    def write_table(self, table_name: str, data: Any) -&gt; None:\n        pass\n</code></pre>"},{"location":"developer_guide/python_libraries/#ddl_utils_interfacepy","title":"<code>ddl_utils_interface.py</code>","text":"<p>Interface for DDL execution:</p> <pre><code>class DDLUtilsInterface(ABC):\n    @abstractmethod\n    def execute_ddl(self, sql: str, description: str) -&gt; None:\n        pass\n\n    @abstractmethod\n    def log_execution(self, script_name: str, description: str) -&gt; None:\n        pass\n</code></pre>"},{"location":"developer_guide/python_libraries/#python-implementation","title":"Python Implementation","text":""},{"location":"developer_guide/python_libraries/#ddl_utilspy","title":"<code>ddl_utils.py</code>","text":"<p>DDL execution with logging and error handling:</p> <pre><code>from python.ddl_utils import DDLUtils\n\nddl_utils = DDLUtils(\n    target_warehouse_id=\"warehouse-guid\",\n    target_workspace_id=\"workspace-guid\",\n    config_workspace_id=\"config-workspace-guid\",\n    config_lakehouse_id=\"config-lakehouse-guid\"\n)\n\n# Execute DDL with logging\nddl_utils.execute_ddl(\n    sql=\"CREATE TABLE test (id INT, name STRING)\",\n    description=\"Create test table\"\n)\n</code></pre>"},{"location":"developer_guide/python_libraries/#lakehouse_utilspy","title":"<code>lakehouse_utils.py</code>","text":"<p>Lakehouse operations for file and table management:</p> <pre><code>from python.lakehouse_utils import LakehouseUtils\n\nlakehouse_utils = LakehouseUtils(\n    target_lakehouse_id=\"lakehouse-guid\",\n    target_workspace_id=\"workspace-guid\"\n)\n\n# File operations\nfiles = lakehouse_utils.list_files(\"Tables/\")\nlakehouse_utils.upload_file(\"local_file.csv\", \"Files/data/\")\n\n# Table operations\ntables = lakehouse_utils.list_tables()\ndf = lakehouse_utils.read_table(\"config.metadata\")\n</code></pre>"},{"location":"developer_guide/python_libraries/#warehouse_utilspy","title":"<code>warehouse_utils.py</code>","text":"<p>Warehouse connectivity and query execution:</p> <pre><code>from python.warehouse_utils import WarehouseUtils\n\nwarehouse_utils = WarehouseUtils(\n    target_warehouse_id=\"warehouse-guid\",\n    target_workspace_id=\"workspace-guid\",\n    dialect=\"fabric\"  # or \"sqlserver\"\n)\n\n# Execute queries\nresult = warehouse_utils.execute_query(\"SELECT * FROM config.metadata\")\nwarehouse_utils.execute_non_query(\"INSERT INTO logs VALUES (...)\")\n</code></pre>"},{"location":"developer_guide/python_libraries/#notebook_utils_abstractionpy","title":"<code>notebook_utils_abstraction.py</code>","text":"<p>Environment-agnostic notebook utilities:</p> <pre><code>from python.notebook_utils_abstraction import get_notebook_utils\n\n# Automatically detects environment\nutils = get_notebook_utils()\n\n# Works in both local and Fabric environments\nutils.display(dataframe)\nconnection = utils.connect_to_artifact(warehouse_id, workspace_id)\nsecret = utils.get_secret(\"API_KEY\", \"key-vault-name\")\n</code></pre>"},{"location":"developer_guide/python_libraries/#pyspark-implementation","title":"PySpark Implementation","text":""},{"location":"developer_guide/python_libraries/#ddl_utilspy_1","title":"<code>ddl_utils.py</code>","text":"<p>Spark-compatible DDL execution:</p> <pre><code>from pyspark.ddl_utils import DDLUtils\n\nddl_utils = DDLUtils(\n    target_lakehouse_id=\"lakehouse-guid\",\n    target_workspace_id=\"workspace-guid\",\n    spark_session=spark\n)\n\n# Execute DDL in Spark context\nddl_utils.execute_ddl(\n    sql=\"CREATE TABLE delta_table USING DELTA AS SELECT * FROM source\",\n    description=\"Create Delta table\"\n)\n</code></pre>"},{"location":"developer_guide/python_libraries/#lakehouse_utilspy_1","title":"<code>lakehouse_utils.py</code>","text":"<p>Spark-based lakehouse operations:</p> <pre><code>from pyspark.lakehouse_utils import LakehouseUtils\n\nlakehouse_utils = LakehouseUtils(\n    target_lakehouse_id=\"lakehouse-guid\",\n    target_workspace_id=\"workspace-guid\",\n    spark_session=spark\n)\n\n# Read/write Delta tables\ndf = lakehouse_utils.read_delta_table(\"config.metadata\")\nlakehouse_utils.write_delta_table(df, \"output.results\")\n</code></pre>"},{"location":"developer_guide/python_libraries/#parquet_load_utilspy","title":"<code>parquet_load_utils.py</code>","text":"<p>Parquet file processing utilities:</p> <pre><code>from pyspark.parquet_load_utils import ParquetLoadUtils\n\nparquet_utils = ParquetLoadUtils(spark_session=spark)\n\n# Load and process parquet files\ndf = parquet_utils.load_parquet_files(\"path/to/files/*.parquet\")\nprocessed_df = parquet_utils.process_parquet_data(df, transformations)\nparquet_utils.save_to_delta(\"output_table\", processed_df)\n</code></pre>"},{"location":"developer_guide/python_libraries/#sql-template-factory","title":"SQL Template Factory","text":"<p>The SQL template system provides database-agnostic SQL generation:</p> <pre><code>from python.sql_templates import SQLTemplates\n\n# Create templates instance\ntemplates = SQLTemplates(dialect=\"fabric\")  # or \"sqlserver\"\n\n# Generate SQL\nsql = templates.render(\"check_table_exists\", \n                      schema_name=\"config\", \n                      table_name=\"metadata\")\n</code></pre> <p>Available templates: - <code>check_table_exists</code> - Check if table exists - <code>create_table</code> - Create table with schema - <code>drop_table</code> - Drop table if exists - <code>insert_row</code> - Insert single row - <code>list_tables</code> - List all tables - <code>get_table_schema</code> - Get table schema information</p>"},{"location":"developer_guide/python_libraries/#testing","title":"Testing","text":""},{"location":"developer_guide/python_libraries/#unit-tests","title":"Unit Tests","text":"<p>Each library has comprehensive unit tests:</p> <pre><code># Run all library tests\npytest ./ingen_fab/python_libs_tests/ -v\n\n# Run specific library tests\npytest ./ingen_fab/python_libs_tests/python/test_warehouse_utils_pytest.py -v\npytest ./ingen_fab/python_libs_tests/pyspark/test_lakehouse_utils_pytest.py -v\n\n# Run with coverage\npytest ./ingen_fab/python_libs_tests/ --cov=ingen_fab.python_libs --cov-report=html\n</code></pre>"},{"location":"developer_guide/python_libraries/#integration-tests","title":"Integration Tests","text":"<p>Test with actual Fabric workspaces:</p> <pre><code># Test with environment variables set\nexport FABRIC_WORKSPACE_ID=\"your-workspace-id\"\nexport FABRIC_LAKEHOUSE_ID=\"your-lakehouse-id\"\npytest ./ingen_fab/python_libs_tests/integration/ -v\n</code></pre>"},{"location":"developer_guide/python_libraries/#development-guidelines","title":"Development Guidelines","text":""},{"location":"developer_guide/python_libraries/#adding-new-libraries","title":"Adding New Libraries","text":"<ol> <li> <p>Create the library module:    <pre><code># python_libs/python/my_new_utils.py\nfrom .notebook_utils_abstraction import get_notebook_utils\n\nclass MyNewUtils:\n    def __init__(self):\n        self.notebook_utils = get_notebook_utils()\n\n    def my_method(self):\n        return \"result\"\n</code></pre></p> </li> <li> <p>Add corresponding tests:    <pre><code># python_libs_tests/python/test_my_new_utils_pytest.py\nimport pytest\nfrom ingen_fab.python_libs.python.my_new_utils import MyNewUtils\n\ndef test_my_method():\n    utils = MyNewUtils()\n    assert utils.my_method() == \"result\"\n</code></pre></p> </li> <li> <p>Update library collection:    <pre><code># python_libs/gather_python_libs.py\n# Add your library to the collection process\n</code></pre></p> </li> </ol>"},{"location":"developer_guide/python_libraries/#interface-implementation","title":"Interface Implementation","text":"<p>When creating new implementations:</p> <ol> <li> <p>Define interface first:    <pre><code># interfaces/my_interface.py\nfrom abc import ABC, abstractmethod\n\nclass MyInterface(ABC):\n    @abstractmethod\n    def my_method(self) -&gt; str:\n        pass\n</code></pre></p> </li> <li> <p>Implement for both runtimes:    <pre><code># python/my_implementation.py\nfrom ..interfaces.my_interface import MyInterface\n\nclass MyImplementation(MyInterface):\n    def my_method(self) -&gt; str:\n        return \"python implementation\"\n</code></pre></p> </li> <li> <p>Create PySpark version:    <pre><code># pyspark/my_implementation.py\nfrom ..interfaces.my_interface import MyInterface\n\nclass MyImplementation(MyInterface):\n    def my_method(self) -&gt; str:\n        return \"pyspark implementation\"\n</code></pre></p> </li> </ol>"},{"location":"developer_guide/python_libraries/#best-practices","title":"Best Practices","text":"<ol> <li>Environment Agnostic: Use abstractions to work in both local and Fabric environments</li> <li>Error Handling: Always include proper error handling and logging</li> <li>Type Hints: Use type hints for better code documentation</li> <li>Testing: Write comprehensive tests for all functionality</li> <li>Documentation: Include docstrings and usage examples</li> </ol>"},{"location":"developer_guide/python_libraries/#library-injection","title":"Library Injection","text":"<p>Libraries are automatically injected into generated notebooks:</p> <pre><code># In generated notebook\nfrom lakehouse_utils import LakehouseUtils\nfrom warehouse_utils import WarehouseUtils\nfrom ddl_utils import DDLUtils\n\n# Libraries are available for use\nlakehouse_utils = LakehouseUtils()\nwarehouse_utils = WarehouseUtils()\nddl_utils = DDLUtils()\n</code></pre>"},{"location":"developer_guide/python_libraries/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Lazy Loading: Libraries use lazy loading where possible</li> <li>Connection Pooling: Database connections are reused</li> <li>Caching: Results are cached when appropriate</li> <li>Memory Management: Large datasets are processed in chunks</li> </ul>"},{"location":"developer_guide/python_libraries/#troubleshooting","title":"Troubleshooting","text":""},{"location":"developer_guide/python_libraries/#common-issues","title":"Common Issues","text":"<ol> <li>Import Errors: Check that libraries are properly injected</li> <li>Connection Failures: Verify workspace and lakehouse IDs</li> <li>Permission Errors: Ensure proper authentication</li> <li>Type Errors: Use type hints and validation</li> </ol>"},{"location":"developer_guide/python_libraries/#debugging","title":"Debugging","text":"<pre><code># Enable debug logging\nimport logging\nlogging.basicConfig(level=logging.DEBUG)\n\n# Test library functionality\nfrom python.warehouse_utils import WarehouseUtils\nutils = WarehouseUtils()\nutils.test_connection()\n</code></pre> <p>The Python libraries provide a robust foundation for building Fabric applications with consistent, testable, and maintainable code.</p>"},{"location":"examples/","title":"Macro Rendering Error","text":"<p>File: <code>examples/index.md</code></p> <p>UndefinedError: 'secrets' is undefined</p> <pre><code>Traceback (most recent call last):\n  File \"/opt/bitnami/python/lib/python3.12/site-packages/mkdocs_macros/plugin.py\", line 688, in render\n    return md_template.render(**page_variables)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/bitnami/python/lib/python3.12/site-packages/jinja2/environment.py\", line 1295, in render\n    self.environment.handle_exception()\n  File \"/opt/bitnami/python/lib/python3.12/site-packages/jinja2/environment.py\", line 942, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"&lt;template&gt;\", line 334, in top-level template code\n  File \"/opt/bitnami/python/lib/python3.12/site-packages/jinja2/environment.py\", line 490, in getattr\n    return getattr(obj, attribute)\n           ^^^^^^^^^^^^^^^^^^^^^^^\njinja2.exceptions.UndefinedError: 'secrets' is undefined\n</code></pre>"},{"location":"examples/sample_project/","title":"Macro Rendering Error","text":"<p>File: <code>examples/sample_project.md</code></p> <p>UndefinedError: 'secrets' is undefined</p> <pre><code>Traceback (most recent call last):\n  File \"/opt/bitnami/python/lib/python3.12/site-packages/mkdocs_macros/plugin.py\", line 688, in render\n    return md_template.render(**page_variables)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/bitnami/python/lib/python3.12/site-packages/jinja2/environment.py\", line 1295, in render\n    self.environment.handle_exception()\n  File \"/opt/bitnami/python/lib/python3.12/site-packages/jinja2/environment.py\", line 942, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"&lt;template&gt;\", line 473, in top-level template code\n  File \"/opt/bitnami/python/lib/python3.12/site-packages/jinja2/environment.py\", line 490, in getattr\n    return getattr(obj, attribute)\n           ^^^^^^^^^^^^^^^^^^^^^^^\njinja2.exceptions.UndefinedError: 'secrets' is undefined\n</code></pre>"},{"location":"user_guide/","title":"User Guide","text":"<p>Welcome to the Ingenious Fabric Accelerator User Guide! This section provides comprehensive information on how to use the tool effectively for your Microsoft Fabric projects.</p>"},{"location":"user_guide/#what-youll-learn","title":"What You'll Learn","text":"<p>This guide covers everything you need to know to get started and become proficient with the Ingenious Fabric Accelerator:</p>"},{"location":"user_guide/#installation","title":"Installation","text":"<ul> <li>System requirements</li> <li>Installation methods</li> <li>Environment setup</li> <li>Verification steps</li> </ul>"},{"location":"user_guide/#quick-start","title":"Quick Start","text":"<ul> <li>Your first project</li> <li>Basic commands</li> <li>Common workflows</li> <li>Tips for success</li> </ul>"},{"location":"user_guide/#cli-reference","title":"CLI Reference","text":"<ul> <li>Complete command reference</li> <li>Options and parameters</li> <li>Usage examples</li> <li>Best practices</li> </ul>"},{"location":"user_guide/#workflows","title":"Workflows","text":"<ul> <li>Development workflow</li> <li>Deployment strategies</li> <li>Testing approaches</li> <li>Troubleshooting</li> </ul>"},{"location":"user_guide/#prerequisites","title":"Prerequisites","text":"<p>Before using the Ingenious Fabric Accelerator, ensure you have:</p> <ul> <li>Python 3.12 or higher</li> <li>Access to a Microsoft Fabric workspace</li> <li>Basic understanding of SQL and Python</li> <li>Familiarity with command-line tools</li> </ul>"},{"location":"user_guide/#getting-help","title":"Getting Help","text":"<p>If you need assistance:</p> <ol> <li>Check this documentation - Most questions are answered here</li> <li>Use the built-in help - Run <code>ingen_fab --help</code> for command-specific help</li> <li>Review examples - Check the Examples section</li> <li>Report issues - Use GitHub Issues for bugs</li> </ol>"},{"location":"user_guide/#quick-navigation","title":"Quick Navigation","text":"<ul> <li> <p> Installation</p> <p>Get up and running quickly</p> <p> Install Now</p> </li> <li> <p> Quick Start</p> <p>Your first project in minutes</p> <p> Start Here</p> </li> <li> <p> CLI Reference</p> <p>Complete command documentation</p> <p> Commands</p> </li> <li> <p>:material-workflow:{ .lg .middle } Workflows</p> <p>Best practices and patterns</p> <p> Workflows</p> </li> </ul>"},{"location":"user_guide/cli_reference/","title":"CLI Reference","text":"<p>Complete reference for all Ingenious Fabric Accelerator commands, options, and usage patterns.</p>"},{"location":"user_guide/cli_reference/#global-options","title":"Global Options","text":"<p>These options are available for all commands:</p> <pre><code>ingen_fab [GLOBAL_OPTIONS] COMMAND [COMMAND_OPTIONS]\n</code></pre> Option Description Environment Variable <code>--fabric-workspace-repo-dir</code> Directory containing fabric workspace repository files <code>FABRIC_WORKSPACE_REPO_DIR</code> <code>--fabric-environment</code> Target environment (development, test, production) <code>FABRIC_ENVIRONMENT</code> <code>--help</code> Show help message - <code>--version</code> Show version information -"},{"location":"user_guide/cli_reference/#command-groups","title":"Command Groups","text":""},{"location":"user_guide/cli_reference/#init","title":"init","text":"<p>Initialize solutions and projects.</p>"},{"location":"user_guide/cli_reference/#init-solution","title":"<code>init solution</code>","text":"<p>Create a new Fabric workspace project with proper structure.</p> <pre><code>ingen_fab init solution --project-name \"My Project\"\n</code></pre> <p>Options: - <code>--project-name</code> (required): Name of the project - <code>--template-dir</code>: Custom template directory (default: built-in templates) - <code>--force</code>: Overwrite existing files</p> <p>Examples: <pre><code># Create a new project\ningen_fab init solution --project-name \"Data Analytics Platform\"\n\n# Create project with custom template\ningen_fab init solution --project-name \"ML Pipeline\" --template-dir ./custom-templates\n\n# Force overwrite existing project\ningen_fab init solution --project-name \"Existing Project\" --force\n</code></pre></p>"},{"location":"user_guide/cli_reference/#ddl","title":"ddl","text":"<p>Compile DDL notebooks from templates.</p>"},{"location":"user_guide/cli_reference/#ddl-compile-notebooks","title":"<code>ddl compile-notebooks</code>","text":"<p>Generate DDL notebooks from SQL and Python scripts.</p> <pre><code>ingen_fab ddl compile-notebooks --output-mode fabric --generation-mode warehouse\n</code></pre> <p>Options: - <code>--output-mode</code>: Output destination (<code>fabric</code>, <code>local</code>) - <code>--generation-mode</code>: Target platform (<code>warehouse</code>, <code>lakehouse</code>) - <code>--force</code>: Overwrite existing notebooks</p> <p>Examples: <pre><code># Generate warehouse notebooks for Fabric deployment\ningen_fab ddl compile-notebooks --output-mode fabric --generation-mode warehouse\n\n# Generate lakehouse notebooks locally\ningen_fab ddl compile-notebooks --output-mode local --generation-mode lakehouse\n\n# Force regeneration of all notebooks\ningen_fab ddl compile-notebooks --output-mode fabric --generation-mode warehouse --force\n</code></pre></p>"},{"location":"user_guide/cli_reference/#deploy","title":"deploy","text":"<p>Deploy to environments and manage workspace items.</p>"},{"location":"user_guide/cli_reference/#deploy-to-environment","title":"<code>deploy to-environment</code>","text":"<p>Deploy all artifacts to a specific environment.</p> <pre><code>ingen_fab deploy to-environment --fabric-workspace-repo-dir . --fabric-environment development\n</code></pre> <p>Options: - <code>--fabric-workspace-repo-dir</code>: Source directory for deployment - <code>--fabric-environment</code>: Target environment - <code>--dry-run</code>: Show what would be deployed without actually deploying - <code>--force</code>: Force deployment even if validation fails</p> <p>Examples: <pre><code># Deploy to development\ningen_fab deploy to-environment --fabric-workspace-repo-dir . --fabric-environment development\n\n# Dry run deployment\ningen_fab deploy to-environment --fabric-workspace-repo-dir . --fabric-environment production --dry-run\n\n# Force deployment\ningen_fab deploy to-environment --fabric-workspace-repo-dir . --fabric-environment test --force\n</code></pre></p>"},{"location":"user_guide/cli_reference/#notebook","title":"notebook","text":"<p>Manage and scan notebook content.</p>"},{"location":"user_guide/cli_reference/#notebook-find-content-files","title":"<code>notebook find-content-files</code>","text":"<p>Find all notebook-content.py files in a directory.</p> <pre><code>ingen_fab notebook find-content-files --base-dir ./fabric_workspace_items\n</code></pre>"},{"location":"user_guide/cli_reference/#notebook-scan-blocks","title":"<code>notebook scan-blocks</code>","text":"<p>Scan and analyze notebook code blocks.</p> <pre><code>ingen_fab notebook scan-blocks --base-dir ./fabric_workspace_items\n</code></pre> <p>Options: - <code>--base-dir</code>: Directory to scan - <code>--output-format</code>: Output format (<code>json</code>, <code>table</code>, <code>summary</code>) - <code>--include-patterns</code>: File patterns to include - <code>--exclude-patterns</code>: File patterns to exclude</p> <p>Examples: <pre><code># Find all notebook files\ningen_fab notebook find-content-files --base-dir ./fabric_workspace_items\n\n# Scan blocks with JSON output\ningen_fab notebook scan-blocks --base-dir ./fabric_workspace_items --output-format json\n\n# Scan specific patterns\ningen_fab notebook scan-blocks --base-dir ./fabric_workspace_items --include-patterns \"*.py\"\n</code></pre></p>"},{"location":"user_guide/cli_reference/#test","title":"test","text":"<p>Test notebooks and Python blocks.</p>"},{"location":"user_guide/cli_reference/#test-local","title":"<code>test local</code>","text":"<p>Test components locally.</p> <pre><code># Test libraries\ningen_fab test local libraries --base-dir .\n\n# Test notebooks\ningen_fab test local notebooks --base-dir ./fabric_workspace_items\n</code></pre>"},{"location":"user_guide/cli_reference/#test-platform","title":"<code>test platform</code>","text":"<p>Test components on the Fabric platform.</p> <pre><code># Test notebooks on platform\ningen_fab test platform notebooks --base-dir ./fabric_workspace_items\n</code></pre> <p>Options: - <code>--base-dir</code>: Directory containing tests - <code>--test-pattern</code>: Pattern to match test files - <code>--verbose</code>: Show detailed output - <code>--failfast</code>: Stop on first failure</p> <p>Examples: <pre><code># Test all libraries locally\ningen_fab test local libraries --base-dir . --verbose\n\n# Test specific pattern\ningen_fab test local notebooks --base-dir ./fabric_workspace_items --test-pattern \"*test*\"\n\n# Test on platform with fail-fast\ningen_fab test platform notebooks --base-dir ./fabric_workspace_items --failfast\n</code></pre></p>"},{"location":"user_guide/cli_reference/#configuration","title":"Configuration","text":""},{"location":"user_guide/cli_reference/#environment-variables","title":"Environment Variables","text":"<p>Set these to avoid specifying options repeatedly:</p> <pre><code># Core configuration\nexport FABRIC_WORKSPACE_REPO_DIR=\"./sample_project\"\nexport FABRIC_ENVIRONMENT=\"development\"\n\n# Authentication\nexport AZURE_TENANT_ID=\"your-tenant-id\"\nexport AZURE_CLIENT_ID=\"your-client-id\"\nexport AZURE_CLIENT_SECRET=\"your-client-secret\"\n\n# Optional: SQL Server for local testing\nexport SQL_SERVER_SA_PASSWORD=\"YourStrong!Passw0rd\"\n</code></pre>"},{"location":"user_guide/cli_reference/#configuration-files","title":"Configuration Files","text":"<p>The tool looks for configuration in: 1. <code>platform_manifest_*.yml</code> files in your project root 2. Variable library files in <code>fabric_workspace_items/config/var_lib.VariableLibrary/valueSets/</code> 3. Environment variables</p>"},{"location":"user_guide/cli_reference/#common-usage-patterns","title":"Common Usage Patterns","text":""},{"location":"user_guide/cli_reference/#development-workflow","title":"Development Workflow","text":"<pre><code># 1. Create project\ningen_fab init solution --project-name \"My Project\"\n\n# 2. Edit DDL scripts and configuration\n# ... make changes ...\n\n# 3. Generate notebooks\ningen_fab ddl compile-notebooks --output-mode fabric --generation-mode warehouse\ningen_fab ddl compile-notebooks --output-mode fabric --generation-mode lakehouse\n\n# 4. Test locally\ningen_fab test local libraries --base-dir .\n\n# 5. Deploy to development\ningen_fab deploy to-environment --fabric-workspace-repo-dir . --fabric-environment development\n\n# 6. Test on platform\ningen_fab test platform notebooks --base-dir ./fabric_workspace_items\n</code></pre>"},{"location":"user_guide/cli_reference/#multi-environment-deployment","title":"Multi-Environment Deployment","text":"<pre><code># Deploy to different environments\ningen_fab deploy to-environment --fabric-workspace-repo-dir . --fabric-environment development\ningen_fab deploy to-environment --fabric-workspace-repo-dir . --fabric-environment test\ningen_fab deploy to-environment --fabric-workspace-repo-dir . --fabric-environment production\n</code></pre>"},{"location":"user_guide/cli_reference/#debugging-and-troubleshooting","title":"Debugging and Troubleshooting","text":"<pre><code># Dry run to see what would be deployed\ningen_fab deploy to-environment --fabric-workspace-repo-dir . --fabric-environment development --dry-run\n\n# Verbose testing\ningen_fab test local libraries --base-dir . --verbose\n\n# Scan notebooks for issues\ningen_fab notebook scan-blocks --base-dir ./fabric_workspace_items --output-format json\n</code></pre>"},{"location":"user_guide/cli_reference/#error-handling","title":"Error Handling","text":""},{"location":"user_guide/cli_reference/#common-error-codes","title":"Common Error Codes","text":"Exit Code Description 0 Success 1 General error 2 Configuration error 3 Authentication error 4 Deployment error 5 Test failure"},{"location":"user_guide/cli_reference/#troubleshooting-tips","title":"Troubleshooting Tips","text":"<ol> <li>Use <code>--help</code> with any command for detailed usage</li> <li>Check environment variables if commands fail unexpectedly</li> <li>Use <code>--dry-run</code> to preview changes before deployment</li> <li>Enable verbose output with <code>--verbose</code> for debugging</li> <li>Check log files in your workspace for detailed error messages</li> </ol>"},{"location":"user_guide/cli_reference/#advanced-usage","title":"Advanced Usage","text":""},{"location":"user_guide/cli_reference/#custom-templates","title":"Custom Templates","text":"<pre><code># Use custom project templates\ningen_fab init solution --project-name \"Custom Project\" --template-dir ./my-templates\n</code></pre>"},{"location":"user_guide/cli_reference/#batch-operations","title":"Batch Operations","text":"<pre><code># Process multiple environments\nfor env in development test production; do\n    ingen_fab deploy to-environment --fabric-workspace-repo-dir . --fabric-environment $env\ndone\n</code></pre>"},{"location":"user_guide/cli_reference/#integration-with-cicd","title":"Integration with CI/CD","text":"<pre><code># CI/CD pipeline example\ningen_fab ddl compile-notebooks --output-mode fabric --generation-mode warehouse\ningen_fab test local libraries --base-dir . --failfast\ningen_fab deploy to-environment --fabric-workspace-repo-dir . --fabric-environment production\n</code></pre>"},{"location":"user_guide/cli_reference/#getting-help","title":"Getting Help","text":"<ul> <li>Command help: <code>ingen_fab COMMAND --help</code></li> <li>Global help: <code>ingen_fab --help</code></li> <li>Version info: <code>ingen_fab --version</code></li> <li>Documentation: This documentation site</li> <li>Issues: GitHub Issues</li> </ul>"},{"location":"user_guide/installation/","title":"Installation","text":"<p>This guide will help you install and set up the Ingenious Fabric Accelerator on your system.</p>"},{"location":"user_guide/installation/#requirements","title":"Requirements","text":"<p>Before installing, ensure your system meets these requirements:</p> <ul> <li>Python 3.12 or higher</li> <li>Git (for cloning the repository)</li> <li>Microsoft Fabric workspace (for deployment)</li> <li>Azure CLI (optional, for authentication)</li> </ul>"},{"location":"user_guide/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"user_guide/installation/#method-1-using-uv-recommended","title":"Method 1: Using uv (Recommended)","text":"<p>uv is the fastest way to install and manage Python dependencies:</p> <pre><code># Install uv if you haven't already\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# Clone the repository\ngit clone https://github.com/your-org/ingen_fab.git\ncd ingen_fab\n\n# Install with uv\nuv sync\n</code></pre>"},{"location":"user_guide/installation/#method-2-using-pip","title":"Method 2: Using pip","text":"<pre><code># Clone the repository\ngit clone https://github.com/your-org/ingen_fab.git\ncd ingen_fab\n\n# Create and activate virtual environment\npython -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install the package\npip install -e .[dev]\n</code></pre>"},{"location":"user_guide/installation/#method-3-development-installation","title":"Method 3: Development Installation","text":"<p>For development work, install with all dependencies:</p> <pre><code># Using uv\nuv sync --all-extras\n\n# Using pip\npip install -e .[dev,docs,tests]\n</code></pre>"},{"location":"user_guide/installation/#environment-setup","title":"Environment Setup","text":""},{"location":"user_guide/installation/#environment-variables","title":"Environment Variables","text":"<p>Set these environment variables to avoid specifying them on each command:</p> <pre><code># Project location\nexport FABRIC_WORKSPACE_REPO_DIR=\"./sample_project\"\n\n# Target environment\nexport FABRIC_ENVIRONMENT=\"development\"\n\n# Authentication (for deployment)\nexport AZURE_TENANT_ID=\"your-tenant-id\"\nexport AZURE_CLIENT_ID=\"your-client-id\"\nexport AZURE_CLIENT_SECRET=\"your-client-secret\"\n</code></pre>"},{"location":"user_guide/installation/#shell-configuration","title":"Shell Configuration","text":"<p>Add these to your shell profile (<code>.bashrc</code>, <code>.zshrc</code>, etc.):</p> <pre><code># Add to ~/.bashrc or ~/.zshrc\nexport PATH=\"$PATH:$HOME/.local/bin\"\n\n# Optional: Create aliases\nalias ifab=\"ingen_fab\"\nalias ifab-help=\"ingen_fab --help\"\n</code></pre>"},{"location":"user_guide/installation/#verification","title":"Verification","text":"<p>Verify your installation by running:</p> <pre><code># Check version\ningen_fab --version\n\n# Display help\ningen_fab --help\n\n# Run a basic command\ningen_fab init --help\n</code></pre> <p>Expected output: <pre><code>Usage: ingen_fab [OPTIONS] COMMAND [ARGS]...\n\n  Ingenious Fabric Accelerator - A tool for managing Microsoft Fabric assets.\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  init      Initialize solutions and projects\n  ddl       Compile DDL notebooks from templates\n  deploy    Deploy to environments and manage workspace items\n  notebook  Manage and scan notebook content\n  test      Test notebooks and Python blocks\n</code></pre></p>"},{"location":"user_guide/installation/#docker-installation-optional","title":"Docker Installation (Optional)","text":"<p>For containerized environments:</p> <pre><code>FROM python:3.12-slim\n\n# Install system dependencies\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    git \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Install uv\nRUN pip install uv\n\n# Copy and install application\nCOPY . /app\nWORKDIR /app\nRUN uv sync\n\n# Set entrypoint\nENTRYPOINT [\"uv\", \"run\", \"ingen_fab\"]\n</code></pre>"},{"location":"user_guide/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user_guide/installation/#common-issues","title":"Common Issues","text":""},{"location":"user_guide/installation/#permission-errors","title":"Permission Errors","text":"<p>If you encounter permission errors: <pre><code># Use user installation\npip install --user -e .[dev]\n\n# Or fix permissions\nsudo chown -R $USER:$USER /path/to/ingen_fab\n</code></pre></p>"},{"location":"user_guide/installation/#python-version-issues","title":"Python Version Issues","text":"<p>Check your Python version: <pre><code>python --version\n# Should show Python 3.12.x or higher\n</code></pre></p>"},{"location":"user_guide/installation/#import-errors","title":"Import Errors","text":"<p>If you get import errors: <pre><code># Reinstall in development mode\npip install -e .\n\n# Or check your PYTHONPATH\nexport PYTHONPATH=\"${PYTHONPATH}:$(pwd)\"\n</code></pre></p>"},{"location":"user_guide/installation/#platform-specific-notes","title":"Platform-Specific Notes","text":""},{"location":"user_guide/installation/#windows","title":"Windows","text":"<ul> <li>Use PowerShell or Command Prompt</li> <li>Virtual environment activation: <code>.venv\\Scripts\\activate</code></li> <li>Path separators: Use forward slashes in commands</li> </ul>"},{"location":"user_guide/installation/#macos","title":"macOS","text":"<ul> <li>May need to install Command Line Tools: <code>xcode-select --install</code></li> <li>Use Homebrew for additional dependencies if needed</li> </ul>"},{"location":"user_guide/installation/#linux","title":"Linux","text":"<ul> <li>Install build tools: <code>sudo apt-get install build-essential</code></li> <li>Some distributions may require additional packages</li> </ul>"},{"location":"user_guide/installation/#next-steps","title":"Next Steps","text":"<p>Once installed, you can:</p> <ol> <li>Get started quickly with your first project</li> <li>Learn the commands available</li> <li>Explore examples to see real-world usage</li> <li>Read the workflows for best practices</li> </ol>"},{"location":"user_guide/installation/#updating","title":"Updating","text":"<p>To update to the latest version:</p> <pre><code># With uv\nuv sync --upgrade\n\n# With pip\npip install --upgrade -e .[dev]\n</code></pre>"},{"location":"user_guide/installation/#uninstalling","title":"Uninstalling","text":"<p>To remove the installation:</p> <pre><code># With uv\nuv clean\n\n# With pip\npip uninstall insight-ingenious-for-fabric\n</code></pre>"},{"location":"user_guide/quick_start/","title":"Quick Start","text":"<p>Get up and running with the Ingenious Fabric Accelerator in just a few minutes! This guide will walk you through creating your first project and deploying it to Microsoft Fabric.</p>"},{"location":"user_guide/quick_start/#prerequisites","title":"Prerequisites","text":"<p>Before starting, ensure you have:</p> <ul> <li> Installed the Ingenious Fabric Accelerator (Installation Guide)</li> <li> Access to a Microsoft Fabric workspace</li> <li> Basic understanding of SQL and Python</li> </ul>"},{"location":"user_guide/quick_start/#step-1-initialize-your-first-project","title":"Step 1: Initialize Your First Project","text":"<p>Create a new project directory and initialize it:</p> <pre><code># Create and navigate to your project directory\nmkdir my-fabric-project\ncd my-fabric-project\n\n# Initialize the project\ningen_fab init solution --project-name \"My First Fabric Project\"\n</code></pre> <p>This creates the following structure: <pre><code>my-fabric-project/\n\u251c\u2500\u2500 ddl_scripts/              # Your DDL scripts go here\n\u251c\u2500\u2500 fabric_workspace_items/   # Generated Fabric artifacts\n\u251c\u2500\u2500 diagrams/                 # Architecture diagrams\n\u2514\u2500\u2500 platform_manifest_*.yml  # Environment configurations\n</code></pre></p>"},{"location":"user_guide/quick_start/#step-2-configure-your-environment","title":"Step 2: Configure Your Environment","text":"<p>Edit the variable library with your Fabric workspace details:</p> <pre><code># Edit the development environment variables\nvim fabric_workspace_items/config/var_lib.VariableLibrary/valueSets/development.json\n</code></pre> <p>Update the configuration with your workspace IDs:</p> <pre><code>{\n  \"fabric_environment\": \"development\",\n  \"config_workspace_id\": \"your-workspace-guid\",\n  \"config_lakehouse_id\": \"your-lakehouse-guid\",\n  \"edw_workspace_id\": \"your-workspace-guid\",\n  \"edw_lakehouse_id\": \"your-lakehouse-guid\",\n  \"edw_warehouse_id\": \"your-warehouse-guid\"\n}\n</code></pre> <p>Finding Your Workspace IDs</p> <p>You can find workspace and lakehouse IDs in the Microsoft Fabric portal URL when you navigate to your workspace or lakehouse.</p>"},{"location":"user_guide/quick_start/#step-3-create-your-first-ddl-script","title":"Step 3: Create Your First DDL Script","text":"<p>Create a simple DDL script to set up a configuration table:</p> <pre><code># Create the DDL script directory\nmkdir -p ddl_scripts/Lakehouses/Config/001_Initial_Setup\n\n# Create your first DDL script\ncat &gt; ddl_scripts/Lakehouses/Config/001_Initial_Setup/001_create_config_table.py &lt;&lt; 'EOF'\n# Create configuration table for the project\nfrom lakehouse_utils import LakehouseUtils\nfrom ddl_utils import DDLUtils\n\n# Initialize utilities\nlakehouse_utils = LakehouseUtils()\nddl_utils = DDLUtils()\n\n# Create the configuration table\nsql_create_table = \"\"\"\nCREATE TABLE IF NOT EXISTS config.project_metadata (\n    id BIGINT,\n    project_name STRING,\n    environment STRING,\n    created_date TIMESTAMP,\n    last_updated TIMESTAMP\n) USING DELTA\nLOCATION 'Tables/config/project_metadata'\n\"\"\"\n\n# Execute the DDL\nddl_utils.execute_ddl(sql_create_table, \"Create project metadata table\")\n\n# Insert initial configuration\nsql_insert_config = \"\"\"\nINSERT INTO config.project_metadata VALUES (\n    1,\n    'My First Fabric Project',\n    'development',\n    current_timestamp(),\n    current_timestamp()\n)\n\"\"\"\n\nddl_utils.execute_ddl(sql_insert_config, \"Insert initial project metadata\")\n\nprint(\"\u2705 Project configuration table created successfully!\")\nEOF\n</code></pre>"},{"location":"user_guide/quick_start/#step-4-generate-ddl-notebooks","title":"Step 4: Generate DDL Notebooks","text":"<p>Transform your DDL scripts into executable notebooks:</p> <pre><code># Generate notebooks for lakehouses\ningen_fab ddl compile-notebooks \\\n    --output-mode fabric \\\n    --generation-mode lakehouse\n\n# Generate notebooks for warehouses (if you have any)\ningen_fab ddl compile-notebooks \\\n    --output-mode fabric \\\n    --generation-mode warehouse\n</code></pre> <p>This creates orchestrator notebooks in <code>fabric_workspace_items/ddl_scripts/</code> that will: - Execute your DDL scripts in the correct order - Track execution state to prevent duplicate runs - Provide comprehensive logging and error handling</p>"},{"location":"user_guide/quick_start/#step-5-deploy-to-fabric","title":"Step 5: Deploy to Fabric","text":"<p>Deploy your project to your Fabric workspace:</p> <pre><code># Deploy to development environment\ningen_fab deploy to-environment \\\n    --fabric-workspace-repo-dir . \\\n    --fabric-environment development\n</code></pre> <p>Authentication Required</p> <p>Make sure you've set up your Azure credentials before deploying. You can use Azure CLI (<code>az login</code>) or environment variables.</p>"},{"location":"user_guide/quick_start/#step-6-run-your-ddl-scripts","title":"Step 6: Run Your DDL Scripts","text":"<ol> <li>Navigate to your Fabric workspace in the Microsoft Fabric portal</li> <li>Find the generated notebooks in the <code>ddl_scripts</code> folder</li> <li>Run the orchestrator notebook: <code>00_all_lakehouses_orchestrator</code></li> </ol> <p>The orchestrator will: - Execute all DDL scripts in the correct sequence - Log execution status and prevent duplicate runs - Handle errors gracefully with detailed logging</p>"},{"location":"user_guide/quick_start/#step-7-verify-your-deployment","title":"Step 7: Verify Your Deployment","text":"<p>Test that everything is working correctly:</p> <pre><code># Test your deployment\ningen_fab test platform notebooks \\\n    --fabric-workspace-repo-dir . \\\n    --fabric-environment development\n</code></pre> <p>Or run the platform testing notebooks directly in Fabric: - <code>platform_testing/python_platform_test.Notebook</code> - <code>platform_testing/pyspark_platform_test.Notebook</code></p>"},{"location":"user_guide/quick_start/#common-first-time-workflows","title":"Common First-Time Workflows","text":""},{"location":"user_guide/quick_start/#adding-more-ddl-scripts","title":"Adding More DDL Scripts","text":"<pre><code># Create a new DDL script for additional tables\ncat &gt; ddl_scripts/Lakehouses/Config/001_Initial_Setup/002_create_data_tables.py &lt;&lt; 'EOF'\n# Create additional data tables\nfrom lakehouse_utils import LakehouseUtils\nfrom ddl_utils import DDLUtils\n\nlakehouse_utils = LakehouseUtils()\nddl_utils = DDLUtils()\n\n# Create a sample data table\nsql_create_table = \"\"\"\nCREATE TABLE IF NOT EXISTS data.sample_data (\n    id BIGINT,\n    name STRING,\n    value DOUBLE,\n    created_date TIMESTAMP\n) USING DELTA\nLOCATION 'Tables/data/sample_data'\n\"\"\"\n\nddl_utils.execute_ddl(sql_create_table, \"Create sample data table\")\nprint(\"\u2705 Sample data table created successfully!\")\nEOF\n\n# Regenerate notebooks\ningen_fab ddl compile-notebooks --output-mode fabric --generation-mode lakehouse\n\n# Redeploy\ningen_fab deploy to-environment --fabric-workspace-repo-dir . --fabric-environment development\n</code></pre>"},{"location":"user_guide/quick_start/#testing-changes-locally","title":"Testing Changes Locally","text":"<pre><code># Test your Python libraries locally\ningen_fab test local libraries --base-dir .\n\n# Test specific notebooks\ningen_fab test local notebooks --base-dir ./fabric_workspace_items\n</code></pre>"},{"location":"user_guide/quick_start/#next-steps","title":"Next Steps","text":"<p>Now that you have a working project, you can:</p> <ol> <li>Learn more commands - Explore all available CLI commands</li> <li>Study the sample project - See a complete real-world example</li> <li>Understand workflows - Learn best practices for development and deployment</li> <li>Explore Python libraries - Understand the available utilities</li> </ol>"},{"location":"user_guide/quick_start/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user_guide/quick_start/#common-issues","title":"Common Issues","text":"<p>Deployment fails with authentication error: <pre><code># Set up Azure authentication\naz login\n# Or set environment variables\nexport AZURE_TENANT_ID=\"your-tenant-id\"\nexport AZURE_CLIENT_ID=\"your-client-id\"\nexport AZURE_CLIENT_SECRET=\"your-client-secret\"\n</code></pre></p> <p>DDL scripts fail to execute: - Check that your workspace and lakehouse IDs are correct - Ensure your DDL scripts have valid syntax - Review the execution logs in the Fabric notebook output</p> <p>Notebooks not generated: - Verify that your DDL scripts are in the correct directory structure - Check that file names start with numbers (001_, 002_, etc.) - Ensure scripts have proper file extensions (.py or .sql)</p>"},{"location":"user_guide/quick_start/#getting-help","title":"Getting Help","text":"<ul> <li>Use <code>ingen_fab --help</code> for command-specific help</li> <li>Check the Examples for more complex scenarios</li> <li>Review the Workflows for best practices</li> <li>Report issues on GitHub</li> </ul> <p>Congratulations!</p> <p>You've successfully created and deployed your first Fabric project! You're now ready to build more complex data solutions with the Ingenious Fabric Accelerator.</p>"},{"location":"user_guide/workflows/","title":"Macro Rendering Error","text":"<p>File: <code>user_guide/workflows.md</code></p> <p>UndefinedError: 'secrets' is undefined</p> <pre><code>Traceback (most recent call last):\n  File \"/opt/bitnami/python/lib/python3.12/site-packages/mkdocs_macros/plugin.py\", line 688, in render\n    return md_template.render(**page_variables)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/bitnami/python/lib/python3.12/site-packages/jinja2/environment.py\", line 1295, in render\n    self.environment.handle_exception()\n  File \"/opt/bitnami/python/lib/python3.12/site-packages/jinja2/environment.py\", line 942, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"&lt;template&gt;\", line 270, in top-level template code\n  File \"/opt/bitnami/python/lib/python3.12/site-packages/jinja2/environment.py\", line 490, in getattr\n    return getattr(obj, attribute)\n           ^^^^^^^^^^^^^^^^^^^^^^^\njinja2.exceptions.UndefinedError: 'secrets' is undefined\n</code></pre>"}]}