from jinja2 import Template, Environment, exceptions

def required_filter(value, var_name=""):
    """Jinja2 filter: raises an error if value is not provided or is falsy."""
    if value is None or (hasattr(value, '__len__') and len(value) == 0):
        raise exceptions.TemplateRuntimeError(
            f"Required parameter '{var_name or 'unknown'}' was not provided!"
        )
    return value


class SQLTemplates:
    """Render SQL templates for different dialects."""

    TEMPLATES = [{'dialect': 'sql_server', 'file_name': 'create_table.sql.jinja', 'file_contents': "CREATE TABLE {{ schema_name | required }}.{{ table_name | required }} (\n    {%- for col, dtype in schema.items() %}\n        {{ col }} {{ dtype }}{% if not loop.last %}, {% endif %}\n    {%- endfor %}\n)\n{% if options %}\n    {%- for k, v in options.items() %}\n        {{ k }} = '{{ v }}'{% if not loop.last %}, {% endif %}\n    {%- endfor %}\n{% endif %}\n;\n", 'full_path': 'ingen_fab/python_libs/python/sql_template_factory/sql_server/create_table.sql.jinja'}, {'dialect': 'sql_server', 'file_name': 'get_table_schema.sql.jinja', 'file_contents': "SELECT COLUMN_NAME, DATA_TYPE\nFROM INFORMATION_SCHEMA.COLUMNS\nWHERE TABLE_SCHEMA = '{{ schema_name | required }}'\n  AND TABLE_NAME = '{{ table_name | required }}'\n;\n", 'full_path': 'ingen_fab/python_libs/python/sql_template_factory/sql_server/get_table_schema.sql.jinja'}, {'dialect': 'sql_server', 'file_name': 'read_table.sql.jinja', 'file_contents': "SELECT {% if columns %}{{ columns | join(', ') }}{% else %}*{% endif %}\nFROM {{ schema_name | required }}.{{ table_name | required }}\n{% if filters %}\nWHERE\n    {%- for col, val in filters.items() %}\n        {{ col }} = '{{ val }}'{% if not loop.last %} AND {% endif %}\n    {%- endfor %}\n{% endif %}\n{% if limit %}\nLIMIT {{ limit }}\n{% endif %}\n;\n", 'full_path': 'ingen_fab/python_libs/python/sql_template_factory/sql_server/read_table.sql.jinja'}, {'dialect': 'sql_server', 'file_name': 'drop_table.sql.jinja', 'file_contents': 'DROP TABLE IF EXISTS {{ schema_name | required }}.{{ table_name | required }}\n', 'full_path': 'ingen_fab/python_libs/python/sql_template_factory/sql_server/drop_table.sql.jinja'}, {'dialect': 'sql_server', 'file_name': 'get_table_row_count.sql.jinja', 'file_contents': 'SELECT COUNT(*)\nFROM {{ schema_name | required }}.{{ table_name | required }};\n', 'full_path': 'ingen_fab/python_libs/python/sql_template_factory/sql_server/get_table_row_count.sql.jinja'}, {'dialect': 'sql_server', 'file_name': 'get_table_metadata.sql.jinja', 'file_contents': "SELECT *\nFROM INFORMATION_SCHEMA.TABLES\nWHERE TABLE_SCHEMA = '{{ schema_name | required }}'\n  AND TABLE_NAME = '{{ table_name | required }}';\n", 'full_path': 'ingen_fab/python_libs/python/sql_template_factory/sql_server/get_table_metadata.sql.jinja'}, {'dialect': 'sql_server', 'file_name': 'check_table_exists.sql.jinja', 'file_contents': "SELECT\n    1\nFROM\n    INFORMATION_SCHEMA.TABLES\nWHERE\n    TABLE_SCHEMA = '{{ schema_name | required }}'\n    AND TABLE_NAME = '{{ table_name | required }}'\n", 'full_path': 'ingen_fab/python_libs/python/sql_template_factory/sql_server/check_table_exists.sql.jinja'}, {'dialect': 'sql_server', 'file_name': 'insert_row.sql.jinja', 'file_contents': 'INSERT INTO {{ schema_name | required }}.{{ table_name | required }} VALUES ({{ row_values | required }})\n', 'full_path': 'ingen_fab/python_libs/python/sql_template_factory/sql_server/insert_row.sql.jinja'}, {'dialect': 'sql_server', 'file_name': 'delete_from_table.sql.jinja', 'file_contents': "DELETE FROM {{ schema_name | required }}.{{ table_name | required }}\n{% if filters %}\nWHERE\n    {%- for col, val in filters.items() %}\n        {{ col }} = '{{ val }}'{% if not loop.last %} AND {% endif %}\n    {%- endfor %}\n{% endif %}\n;\n", 'full_path': 'ingen_fab/python_libs/python/sql_template_factory/sql_server/delete_from_table.sql.jinja'}, {'dialect': 'sql_server', 'file_name': 'vacuum_table.sql.jinja', 'file_contents': '-- No-op for SQL warehouses. This template is required for interface compatibility.\n-- VACUUM is not supported in standard SQL Server/Fabric warehouses.\n', 'full_path': 'ingen_fab/python_libs/python/sql_template_factory/sql_server/vacuum_table.sql.jinja'}, {'dialect': 'sql_server', 'file_name': 'list_tables.sql.jinja', 'file_contents': "SELECT\n    TABLE_SCHEMA, \n    TABLE_NAME\nFROM\n    INFORMATION_SCHEMA.TABLES\n\n    {% if prefix %}\nWHERE\n    TABLE_NAME LIKE '{{ prefix }}%'\n{% endif %}\n", 'full_path': 'ingen_fab/python_libs/python/sql_template_factory/sql_server/list_tables.sql.jinja'}, {'dialect': 'sql_server', 'file_name': 'list_schemas.sql.jinja', 'file_contents': 'SELECT SCHEMA_NAME as schema_name\nFROM INFORMATION_SCHEMA.SCHEMATA;\n', 'full_path': 'ingen_fab/python_libs/python/sql_template_factory/sql_server/list_schemas.sql.jinja'}, {'dialect': 'sql_server', 'file_name': 'rename_table.sql.jinja', 'file_contents': "EXEC sp_rename '{{ schema_name | required }}.{{ old_table_name | required }}', '{{ new_table_name | required }}';\n", 'full_path': 'ingen_fab/python_libs/python/sql_template_factory/sql_server/rename_table.sql.jinja'}, {'dialect': 'sql_server', 'file_name': 'check_schema_exists.sql.jinja', 'file_contents': "SELECT 1 \nFROM INFORMATION_SCHEMA.SCHEMATA\nWHERE LOWER(SCHEMA_NAME) = LOWER('{{ schema_name | required }}')\n", 'full_path': 'ingen_fab/python_libs/python/sql_template_factory/sql_server/check_schema_exists.sql.jinja'}, {'dialect': 'sql_server', 'file_name': 'create_table_from_values.sql.jinja', 'file_contents': "SELECT\n    * INTO {{ schema_name | required('schema_name') }}.{{ table_name | required('table_name') }}\nFROM\n    (\n        VALUES\n            {{ values_clause | required('values_clause') }}\n    ) AS v(\n        {{ column_names | required('column_names') }}\n    )\n", 'full_path': 'ingen_fab/python_libs/python/sql_template_factory/sql_server/create_table_from_values.sql.jinja'}, {'dialect': 'mysql', 'file_name': 'create_table.sql.jinja', 'file_contents': "CREATE TABLE {{ schema_name | required }}.{{ table_name | required }} (\n    {%- for col, dtype in schema.items() %}\n        {{ col }} {{ dtype }}{% if not loop.last %}, {% endif %}\n    {%- endfor %}\n)\n{% if options %}\n    {%- for k, v in options.items() %}\n        {{ k }} = '{{ v }}'{% if not loop.last %}, {% endif %}\n    {%- endfor %}\n{% endif %}\n;", 'full_path': 'ingen_fab/python_libs/python/sql_template_factory/mysql/create_table.sql.jinja'}, {'dialect': 'mysql', 'file_name': 'get_table_schema.sql.jinja', 'file_contents': "SELECT\n    COLUMN_NAME,\n    DATA_TYPE,\n    IS_NULLABLE,\n    COLUMN_DEFAULT\nFROM\n    INFORMATION_SCHEMA.COLUMNS\nWHERE\n    TABLE_SCHEMA = '{{ schema_name | required }}'\n    AND TABLE_NAME = '{{ table_name | required }}'\nORDER BY\n    ORDINAL_POSITION", 'full_path': 'ingen_fab/python_libs/python/sql_template_factory/mysql/get_table_schema.sql.jinja'}, {'dialect': 'mysql', 'file_name': 'read_table.sql.jinja', 'file_contents': 'SELECT\n    *\nFROM\n    {{ schema_name | required }}.{{ table_name | required }}\n{% if limit %}\nLIMIT {{ limit }}\n{% endif %}', 'full_path': 'ingen_fab/python_libs/python/sql_template_factory/mysql/read_table.sql.jinja'}, {'dialect': 'mysql', 'file_name': 'drop_table.sql.jinja', 'file_contents': 'DROP TABLE {{ schema_name | required }}.{{ table_name | required }};', 'full_path': 'ingen_fab/python_libs/python/sql_template_factory/mysql/drop_table.sql.jinja'}, {'dialect': 'mysql', 'file_name': 'get_table_row_count.sql.jinja', 'file_contents': 'SELECT\n    COUNT(*) as row_count\nFROM\n    {{ schema_name | required }}.{{ table_name | required }}', 'full_path': 'ingen_fab/python_libs/python/sql_template_factory/mysql/get_table_row_count.sql.jinja'}, {'dialect': 'mysql', 'file_name': 'get_table_metadata.sql.jinja', 'file_contents': "SELECT\n    TABLE_NAME,\n    TABLE_SCHEMA,\n    ENGINE,\n    TABLE_ROWS,\n    DATA_LENGTH,\n    INDEX_LENGTH,\n    CREATE_TIME,\n    UPDATE_TIME,\n    TABLE_COMMENT\nFROM\n    INFORMATION_SCHEMA.TABLES\nWHERE\n    TABLE_SCHEMA = '{{ schema_name | required }}'\n    AND TABLE_NAME = '{{ table_name | required }}'", 'full_path': 'ingen_fab/python_libs/python/sql_template_factory/mysql/get_table_metadata.sql.jinja'}, {'dialect': 'mysql', 'file_name': 'check_table_exists.sql.jinja', 'file_contents': "SELECT\n    1\nFROM\n    INFORMATION_SCHEMA.TABLES\nWHERE\n    TABLE_SCHEMA = '{{ schema_name | required }}'\n    AND TABLE_NAME = '{{ table_name | required }}'", 'full_path': 'ingen_fab/python_libs/python/sql_template_factory/mysql/check_table_exists.sql.jinja'}, {'dialect': 'mysql', 'file_name': 'insert_row.sql.jinja', 'file_contents': "INSERT INTO {{ schema_name | required }}.{{ table_name | required }} (\n    {%- for col in columns %}\n        {{ col }}{% if not loop.last %}, {% endif %}\n    {%- endfor %}\n)\nVALUES (\n    {%- for val in values %}\n        '{{ val }}'{% if not loop.last %}, {% endif %}\n    {%- endfor %}\n);", 'full_path': 'ingen_fab/python_libs/python/sql_template_factory/mysql/insert_row.sql.jinja'}, {'dialect': 'mysql', 'file_name': 'delete_from_table.sql.jinja', 'file_contents': "DELETE FROM {{ schema_name | required }}.{{ table_name | required }}\n{% if conditions %}\nWHERE\n    {%- for col, val in conditions.items() %}\n        {{ col }} = '{{ val }}'{% if not loop.last %} AND {% endif %}\n    {%- endfor %}\n{% endif %};", 'full_path': 'ingen_fab/python_libs/python/sql_template_factory/mysql/delete_from_table.sql.jinja'}, {'dialect': 'mysql', 'file_name': 'vacuum_table.sql.jinja', 'file_contents': "-- MySQL doesn't have VACUUM like PostgreSQL, but OPTIMIZE TABLE serves a similar purpose\nOPTIMIZE TABLE {{ schema_name | required }}.{{ table_name | required }};", 'full_path': 'ingen_fab/python_libs/python/sql_template_factory/mysql/vacuum_table.sql.jinja'}, {'dialect': 'mysql', 'file_name': 'list_tables.sql.jinja', 'file_contents': "SELECT\n    TABLE_SCHEMA, \n    TABLE_NAME\nFROM\n    INFORMATION_SCHEMA.TABLES\n\n    {% if prefix %}\nWHERE\n    TABLE_NAME LIKE '{{ prefix }}%'\n{% endif %}", 'full_path': 'ingen_fab/python_libs/python/sql_template_factory/mysql/list_tables.sql.jinja'}, {'dialect': 'mysql', 'file_name': 'list_schemas.sql.jinja', 'file_contents': 'SELECT\n    SCHEMA_NAME\nFROM\n    INFORMATION_SCHEMA.SCHEMATA', 'full_path': 'ingen_fab/python_libs/python/sql_template_factory/mysql/list_schemas.sql.jinja'}, {'dialect': 'mysql', 'file_name': 'rename_table.sql.jinja', 'file_contents': 'RENAME TABLE {{ schema_name | required }}.{{ old_table_name | required }} TO {{ schema_name }}.{{ new_table_name | required }};', 'full_path': 'ingen_fab/python_libs/python/sql_template_factory/mysql/rename_table.sql.jinja'}, {'dialect': 'mysql', 'file_name': 'check_schema_exists.sql.jinja', 'file_contents': "SELECT\n    1\nFROM\n    INFORMATION_SCHEMA.SCHEMATA\nWHERE\n    SCHEMA_NAME = '{{ schema_name | required }}'", 'full_path': 'ingen_fab/python_libs/python/sql_template_factory/mysql/check_schema_exists.sql.jinja'}, {'dialect': 'mysql', 'file_name': 'create_table_from_values.sql.jinja', 'file_contents': "CREATE TABLE {{ schema_name | required }}.{{ table_name | required }} AS\nSELECT *\nFROM (\n    {%- for row in values %}\n    SELECT\n        {%- for col, val in row.items() %}\n            '{{ val }}' AS {{ col }}{% if not loop.last %}, {% endif %}\n        {%- endfor %}\n        {% if not loop.last %}\n    UNION ALL\n        {% endif %}\n    {%- endfor %}\n) AS t;", 'full_path': 'ingen_fab/python_libs/python/sql_template_factory/mysql/create_table_from_values.sql.jinja'}, {'dialect': 'fabric', 'file_name': 'create_table.sql.jinja', 'file_contents': "CREATE TABLE {{ schema_name | required }}.{{ table_name | required }} (\n    {%- for col, dtype in schema.items() %}\n        {{ col }} {{ dtype }}{% if not loop.last %}, {% endif %}\n    {%- endfor %}\n)\n{% if options %}\n    {%- for k, v in options.items() %}\n        {{ k }} = '{{ v }}'{% if not loop.last %}, {% endif %}\n    {%- endfor %}\n{% endif %}\n;\n", 'full_path': 'ingen_fab/python_libs/python/sql_template_factory/fabric/create_table.sql.jinja'}, {'dialect': 'fabric', 'file_name': 'get_table_schema.sql.jinja', 'file_contents': "SELECT COLUMN_NAME, DATA_TYPE\nFROM INFORMATION_SCHEMA.COLUMNS\nWHERE TABLE_SCHEMA = '{{ schema_name | required }}'\n  AND TABLE_NAME = '{{ table_name | required }}'\n;\n", 'full_path': 'ingen_fab/python_libs/python/sql_template_factory/fabric/get_table_schema.sql.jinja'}, {'dialect': 'fabric', 'file_name': 'read_table.sql.jinja', 'file_contents': "SELECT {% if columns %}{{ columns | join(', ') }}{% else %}*{% endif %}\nFROM {{ schema_name | required }}.{{ table_name | required }}\n{% if filters %}\nWHERE\n    {%- for col, val in filters.items() %}\n        {{ col }} = '{{ val }}'{% if not loop.last %} AND {% endif %}\n    {%- endfor %}\n{% endif %}\n{% if limit %}\nLIMIT {{ limit }}\n{% endif %}\n;\n", 'full_path': 'ingen_fab/python_libs/python/sql_template_factory/fabric/read_table.sql.jinja'}, {'dialect': 'fabric', 'file_name': 'drop_table.sql.jinja', 'file_contents': 'DROP TABLE IF EXISTS {{ schema_name | required }}.{{ table_name | required }}\n', 'full_path': 'ingen_fab/python_libs/python/sql_template_factory/fabric/drop_table.sql.jinja'}, {'dialect': 'fabric', 'file_name': 'get_table_row_count.sql.jinja', 'file_contents': 'SELECT COUNT(*)\nFROM {{ schema_name | required }}.{{ table_name | required }};\n', 'full_path': 'ingen_fab/python_libs/python/sql_template_factory/fabric/get_table_row_count.sql.jinja'}, {'dialect': 'fabric', 'file_name': 'get_table_metadata.sql.jinja', 'file_contents': "SELECT *\nFROM INFORMATION_SCHEMA.TABLES\nWHERE TABLE_SCHEMA = '{{ schema_name | required }}'\n  AND TABLE_NAME = '{{ table_name | required }}';\n", 'full_path': 'ingen_fab/python_libs/python/sql_template_factory/fabric/get_table_metadata.sql.jinja'}, {'dialect': 'fabric', 'file_name': 'check_table_exists.sql.jinja', 'file_contents': "SELECT\n    1\nFROM\n    INFORMATION_SCHEMA.TABLES\nWHERE\n    TABLE_SCHEMA = '{{ schema_name | required }}'\n    AND TABLE_NAME = '{{ table_name | required }}'\n", 'full_path': 'ingen_fab/python_libs/python/sql_template_factory/fabric/check_table_exists.sql.jinja'}, {'dialect': 'fabric', 'file_name': 'insert_row.sql.jinja', 'file_contents': 'INSERT INTO {{ schema_name | required }}.{{ table_name | required }} VALUES ({{ row_values | required }})\n', 'full_path': 'ingen_fab/python_libs/python/sql_template_factory/fabric/insert_row.sql.jinja'}, {'dialect': 'fabric', 'file_name': 'delete_from_table.sql.jinja', 'file_contents': "DELETE FROM {{ schema_name | required }}.{{ table_name | required }}\n{% if filters %}\nWHERE\n    {%- for col, val in filters.items() %}\n        {{ col }} = '{{ val }}'{% if not loop.last %} AND {% endif %}\n    {%- endfor %}\n{% endif %}\n;\n", 'full_path': 'ingen_fab/python_libs/python/sql_template_factory/fabric/delete_from_table.sql.jinja'}, {'dialect': 'fabric', 'file_name': 'vacuum_table.sql.jinja', 'file_contents': '-- No-op for SQL warehouses. This template is required for interface compatibility.\n-- VACUUM is not supported in standard SQL Server/Fabric warehouses.\n', 'full_path': 'ingen_fab/python_libs/python/sql_template_factory/fabric/vacuum_table.sql.jinja'}, {'dialect': 'fabric', 'file_name': 'list_tables.sql.jinja', 'file_contents': "SELECT\n    TABLE_SCHEMA, \n    TABLE_NAME\nFROM\n    INFORMATION_SCHEMA.TABLES\n\n    {% if prefix %}\nWHERE\n    TABLE_NAME LIKE '{{ prefix }}%'\n{% endif %}\n", 'full_path': 'ingen_fab/python_libs/python/sql_template_factory/fabric/list_tables.sql.jinja'}, {'dialect': 'fabric', 'file_name': 'list_schemas.sql.jinja', 'file_contents': 'SELECT SCHEMA_NAME as schema_name\nFROM INFORMATION_SCHEMA.SCHEMATA;\n', 'full_path': 'ingen_fab/python_libs/python/sql_template_factory/fabric/list_schemas.sql.jinja'}, {'dialect': 'fabric', 'file_name': 'rename_table.sql.jinja', 'file_contents': "EXEC sp_rename '{{ schema_name | required }}.{{ old_table_name | required }}', '{{ new_table_name | required }}';\n", 'full_path': 'ingen_fab/python_libs/python/sql_template_factory/fabric/rename_table.sql.jinja'}, {'dialect': 'fabric', 'file_name': 'check_schema_exists.sql.jinja', 'file_contents': "SELECT 1 \nFROM INFORMATION_SCHEMA.SCHEMATA\nWHERE SCHEMA_NAME = '{{ schema_name | required }}'\n", 'full_path': 'ingen_fab/python_libs/python/sql_template_factory/fabric/check_schema_exists.sql.jinja'}, {'dialect': 'fabric', 'file_name': 'create_table_from_values.sql.jinja', 'file_contents': "SELECT\n    * INTO {{ schema_name | required('schema_name') }}.{{ table_name | required('table_name') }}\nFROM\n    (\n        VALUES\n            {{ values_clause | required('values_clause') }}\n    ) AS v(\n        {{ column_names | required('column_names') }}\n    )\n", 'full_path': 'ingen_fab/python_libs/python/sql_template_factory/fabric/create_table_from_values.sql.jinja'}]


    def __init__(self, dialect: str = "fabric"):
        self.dialect = dialect
        # Use a Jinja2 Environment to add custom filters
        self.env = Environment()
        # Register the 'required' filter
        self.env.filters["required"] = lambda value, var_name="": required_filter(value, var_name)

    def get_template(self, template_name: str, dialect: str) -> str:
        """Get the SQL template for the specified dialect."""
        template = next(
        (t['file_contents'] for t in self.TEMPLATES
            if t['file_name'] == f"{template_name}.sql.jinja" and t['dialect'] == dialect), None
        )
        if not template:
            raise FileNotFoundError(f"Template {template_name} for dialect {dialect} not found.")
        return template

    def render(self, template_name: str, **kwargs) -> str:
        """Render a SQL template with the given parameters."""
        template_str = self.get_template(template_name, self.dialect)
        # Pass parameter names for error messages
        template = self.env.from_string(template_str)
        # Use kwargs for variable names
        params_with_names = {k: v for k, v in kwargs.items()}
        return template.render(**params_with_names)