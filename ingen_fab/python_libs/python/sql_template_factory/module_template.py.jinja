from jinja2 import Environment, exceptions
def required_filter(value, var_name=""):
"""Jinja2 filter: raises an error if value is not provided or is falsy."""
if value is None or (hasattr(value, '__len__') and len(value) == 0):
raise exceptions.TemplateRuntimeError(
f"Required parameter '{var_name or 'unknown'}' was not provided!"
)
return value
class SQLTemplates:
"""Render SQL templates for different dialects."""
TEMPLATES = {{ Templates }}
def __init__(self, dialect: str = "fabric"):
self.dialect = dialect
# Use a Jinja2 Environment to add custom filters
self.env = Environment()
# Register the 'required' filter
self.env.filters["required"] = lambda value, var_name="": required_filter(value, var_name)
def get_template(self, template_name: str, dialect: str) -> str:
"""Get the SQL template for the specified dialect."""
# Always use fabric templates as the source
template = next(
(t['file_contents'] for t in self.TEMPLATES
if t['file_name'] == f"{template_name}.sql.jinja" and t['dialect'] == "fabric"), None
)
if not template:
raise FileNotFoundError(f"Template {template_name} for dialect fabric not found.")
return template
def render(self, template_name: str, **kwargs) -> str:
"""Render a SQL template with the given parameters and translate if needed."""
# Always get fabric template
template_str = self.get_template(template_name, "fabric")
# Render the template with Jinja2
template = self.env.from_string(template_str)
params_with_names = {k: v for k, v in kwargs.items()}
rendered_sql = template.render(**params_with_names)
# Translate SQL if needed using SQLGlot
from ingen_fab.python_libs.python.sql_translator import get_sql_translator
try:
translator = get_sql_translator()
translated_sql = translator.translate_sql(rendered_sql)
return translated_sql
except Exception as e:
# Log the error but don't fail - return original SQL
import logging
logger = logging.getLogger(__name__)
logger.warning(f"SQL translation failed for template {template_name}: {e}")
logger.warning(f"Returning original SQL: {rendered_sql}")
return rendered_sql
