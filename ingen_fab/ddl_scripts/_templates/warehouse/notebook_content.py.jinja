{%- import 'nb_macros.py.jinja' as macros -%}
{%- include "nb_header.py.jinja" %}

# THESE ARE RUNTIME SET VARIABLES AND SHOULD BE SET BY CALLING NOTEBOOK OR PIPELIE 
target_lakehouse_config_prefix = "{{ target_lakehouse_config_prefix | lower }}"


{{macros.python_cell_with_heading("## Inject Configurations from Variable Library")}}
# This section is automatically generated from the variable library JSON files. DO NOT ALTER
# variableLibraryInjectionStart: var_lib
# variableLibraryInjectionEnd: var_lib


{{macros.python_cell_with_heading("## üì¶ Inject Reusable Classes and Functions")}}

{%include "lib.py.jinja" %}

{{macros.python_cell_with_heading("## Instantiate the Helper Classes")}}

cu = config_utils(configs_object.config_workspace_id,configs_object.config_lakehouse_id)
cu.overwrite_configs(configs_dict)
configs = cu.get_configs_as_object(fabric_environment)
target_workspace_id = configs.get_attribute(f"{target_lakehouse_config_prefix.lower()}_workspace_id")
target_lakehouse_id = configs.get_attribute(f"{target_lakehouse_config_prefix.lower()}_lakehouse_id")
lu = warehouse_utils(target_workspace_id, target_lakehouse_id)
du = ddl_utils(target_workspace_id, target_lakehouse_id)


{% for content in cells %}

{{ content }}

{% endfor %}


{{macros.python_cell_with_heading("## üìá Print the execution log")}}

du.print_log() 

{{macros.python_cell_with_heading("## ‚úîÔ∏è If we make it to the end return a successful result")}}

from notebookutils import mssparkutils
mssparkutils.notebook.exit("success")

{%include "nb_footer.py.jinja" %}
