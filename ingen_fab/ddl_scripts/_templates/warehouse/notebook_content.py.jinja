{%- import 'nb_macros.py.jinja' as macros -%}
{%- include "nb_header.py.jinja" %}

# THESE SHOULD BE SET BY THE SCHEDULER 
fabric_environment = "development"  # fabric environment, e.g. development, test, production
config_workspace_id = "50fbcab0-7d56-46f7-90f6-80ceb00ac86d"
config_lakehouse_id = "f0121783-34cc-4e64-bfb5-6b44b1a7f04b"
target_lakehouse_config_prefix = "{{ target_lakehouse_config_prefix | lower }}"
# ONLY USE THIS IN DEV
full_reset = False # ‚ö†Ô∏è Full reset -- DESTRUCTIVE - will drop all tables

{{macros.python_cell_with_heading("## üì¶ Inject Reusable Classes and Functions")}}

{%include "lib.py.jinja" %}

{{macros.python_cell_with_heading("## Instantiate the Helper Classes")}}

cu = config_utils(config_workspace_id,config_lakehouse_id)
configs = cu.get_configs_as_object(fabric_environment)
target_workspace_id = configs.get_attribute(f"{target_lakehouse_config_prefix.lower()}_workspace_id")
target_lakehouse_id = configs.get_attribute(f"{target_lakehouse_config_prefix.lower()}_lakehouse_id")
lu = lakehouse_utils(target_workspace_id, target_lakehouse_id)
du = ddl_utils(target_workspace_id, target_lakehouse_id)


{% for content in cells %}

{{ content }}

{% endfor %}


{{macros.python_cell_with_heading("## üìá Print the execution log")}}

du.print_log() 

{{macros.python_cell_with_heading("## ‚úîÔ∏è If we make it to the end return a successful result")}}

from notebookutils import mssparkutils
mssparkutils.notebook.exit("success")

{%include "nb_footer.py.jinja" %}
