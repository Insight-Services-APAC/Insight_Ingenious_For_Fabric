{%- import 'shared/notebook/macros/notebook_macros.py.jinja' as macros -%}
{% if language_group == "synapse_pyspark" %}
{%- include "shared/notebook/headers/pyspark.py.jinja" %}
{% else %}
{%- include "shared/notebook/headers/python.py.jinja" %}
{% endif %}

{% include "shared/notebook/environment/library_loader.py.jinja" %}


{{macros.python_cell_with_heading("## üóÇÔ∏è Now Load the Custom Python Libraries")}}

if run_mode == "local":
    from ingen_fab.python_libs.common.config_utils import *
    from ingen_fab.python_libs.python.ddl_utils import ddl_utils
    from ingen_fab.python_libs.python.notebook_utils_abstraction import NotebookUtilsFactory
    from ingen_fab.python_libs.python.sql_templates import SQLTemplates
    from ingen_fab.python_libs.python.warehouse_utils import warehouse_utils
    from ingen_fab.python_libs.python.pipeline_utils import PipelineUtils
    notebookutils = NotebookUtilsFactory.create_instance() 
else:
    files_to_load = [
        "ingen_fab/python_libs/common/config_utils.py",
        "ingen_fab/python_libs/python/ddl_utils.py",
        "ingen_fab/python_libs/python/notebook_utils_abstraction.py",
        "ingen_fab/python_libs/python/sql_templates.py",
        "ingen_fab/python_libs/python/warehouse_utils.py",
        "ingen_fab/python_libs/python/pipeline_utils.py"
    ]
    load_python_modules_from_path(mount_path, files_to_load)
{{ macros.python_cell_with_heading("## üÜï Instantiate Required Classes ")}}


configs: ConfigsObject = get_configs_as_object()


{{macros.python_cell_with_heading("## üèÉ‚Äç‚ôÇÔ∏è‚Äç‚û°Ô∏è Run All Warehouse DDL")}}
# Import required libraries
import sys
from datetime import datetime

# Initialize variables
success_count = 0
failed_notebooks = []
start_time = datetime.now()

# Define execution function
def execute_notebook(notebook_name, index, total, timeout_seconds=3600):
    """Execute a single notebook and handle success/failure."""
    global success_count, failed_notebooks
    
    try:
        
        print(f"{'='*60}")
        print(f"Executing notebook {index}/{total}: {notebook_name}")
        print(f"{'='*60}")
        params = {}
        
        # Use notebook utils abstraction for cross-environment compatibility
        result = notebookutils.mssparkutils.notebook.run(
            notebook_name,
            timeout=timeout_seconds,
            params=params
        )
        
        if (result == 'success'):
            success_count += 1
            print(f"‚úì Successfully executed: {notebook_name}")
            print(f"Exit value: {result}")
            return True
        else: 
            # Record the failure but continue execution to get full picture
            failed_notebooks.append({
                'name': notebook_name,
                'error': f"Notebook returned: {result}",
                'index': index
            })
            print(f"‚úó Failed to execute: {notebook_name}")
            print(f"Result: {result}")
            return False

    except Exception as e:
        # Record the failure but continue execution to get full picture
        failed_notebooks.append({
            'name': notebook_name,
            'error': str(e),
            'index': index
        })
        print(f"‚úó Failed to execute: {notebook_name}")
        print(f"Error: {str(e)}")
        return False

print(f"Starting orchestration for {{ warehouse_name }} warehouse")
print(f"Start time: {start_time}")
print(f"Total notebooks to execute: {{ total_notebooks }}")
print("="*60)

{%- for notebook in notebooks %}
execute_notebook("{{ notebook.name }}", {{ notebook.index }}, {{ notebook.total }})
{%- endfor %}

# Final Summary
end_time = datetime.now()
duration = end_time - start_time
failed_count = {{ total_notebooks }} - success_count

print(f"{'='*60}")
print(f"Orchestration Complete!")
print(f"{'='*60}")
print(f"End time: {end_time}")
print(f"Duration: {duration}")
print(f"Total notebooks: {{ total_notebooks }}")
print(f"Successfully executed: {success_count}")
print(f"Failed: {failed_count}")

# Show details of failed notebooks if any
if failed_notebooks:
    print(f"\n{'='*60}")
    print("FAILED NOTEBOOKS DETAILS:")
    print(f"{'='*60}")
    for i, failure in enumerate(failed_notebooks, 1):
        print(f"{i}. {failure['name']}")
        print(f"   Error: {failure['error']}")
        print()

if success_count == {{ total_notebooks }}:
    print("\n‚úì All notebooks executed successfully!")
    notebookutils.exit_notebook("success")
else:
    print(f"\n‚úó Orchestration completed with {failed_count} failure(s)")
    # Exit with failure status - this will be caught by parent orchestrator as non-"success"
    error_summary = f"failed: {failed_count} of {{ total_notebooks }} notebooks failed"
    notebookutils.exit_notebook(error_summary)

{%include "shared/notebook/cells/footer.py.jinja" %}