{%- import 'shared/notebook/macros/notebook_macros.py.jinja' as macros -%}
{% if language_group == "synapse_pyspark" %}
    {%- include "shared/notebook/headers/pyspark.py.jinja" %}
{% else %}
    {%- include "shared/notebook/headers/python.py.jinja" %}
{% endif %}
{% include "shared/notebook/environment/library_loader.py.jinja" %}
{{ macros.python_cell_with_heading("## üóÇÔ∏è Now Load the Custom Python Libraries") }}
if run_mode == "local":
from ingen_fab.python_libs.common.config_utils import *
from ingen_fab.python_libs.pyspark.lakehouse_utils import lakehouse_utils
from ingen_fab.python_libs.pyspark.ddl_utils import ddl_utils
from ingen_fab.python_libs.pyspark.notebook_utils_abstraction import NotebookUtilsFactory
notebookutils = NotebookUtilsFactory.create_instance()
else:
files_to_load = [
"ingen_fab/python_libs/common/config_utils.py",
"ingen_fab/python_libs/pyspark/lakehouse_utils.py",
"ingen_fab/python_libs/pyspark/ddl_utils.py",
"ingen_fab/python_libs/pyspark/notebook_utils_abstraction.py"
]
load_python_modules_from_path(mount_path, files_to_load)
{{ macros.python_cell_with_heading("## üÜï Instantiate Required Classes ") }}
target_lakehouse_config_prefix = "{{ target_lakehouse_config_prefix | required }}"
configs: ConfigsObject = get_configs_as_object()
target_lakehouse_id = get_config_value(f"{target_lakehouse_config_prefix.lower()}_lakehouse_id")
target_workspace_id = get_config_value(f"{target_lakehouse_config_prefix.lower()}_workspace_id")
target_lakehouse = lakehouse_utils(
target_workspace_id=target_workspace_id,
target_lakehouse_id=target_lakehouse_id,
spark=spark  # Pass the Spark session if available
)
du = ddl_utils(
target_workspace_id=target_workspace_id,
target_lakehouse_id=target_lakehouse_id,
spark=spark  # Pass the Spark session if available
)
from pyspark.sql.types import (
DateType,
DoubleType,
IntegerType,
LongType,
StringType,
StructField,
StructType,
TimestampType
)
{{ macros.python_cell_with_heading("## üèÉ‚Äç‚ôÇÔ∏è‚Äç‚û°Ô∏è Run DDL Cells ") }}
# DDL cells are injected below:
{% for content in cells %}{{ content }}{% endfor %}
# METADATA ********************
# META {
# META   "language": "python",
# META   "language_group": "synapse_pyspark"
# META }
# MARKDOWN ********************
# ## üìá Print the execution log
# CELL ********************
du.print_log()
# METADATA ********************
# META {
# META   "language": "python",
# META   "language_group": "synapse_pyspark"
# META }
# MARKDOWN ********************
# ## ‚úîÔ∏è If we make it to the end return a successful result
# CELL ********************
notebookutils.mssparkutils.notebook.exit("success")
{% include "shared/notebook/cells/footer.py.jinja" %}
